
PWM_Blink_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002a38  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002bcc  08002bcc  00012bcc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002be4  08002be4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002be4  08002be4  00012be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002bec  08002bec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002bec  08002bec  00012bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002bf0  08002bf0  00012bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  08002c00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002c00  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000b77f  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000183e  00000000  00000000  0002b7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b60  00000000  00000000  0002d040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008f5  00000000  00000000  0002dba0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001546e  00000000  00000000  0002e495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000c29b  00000000  00000000  00043903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00089341  00000000  00000000  0004fb9e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003034  00000000  00000000  000d8ee0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006c  00000000  00000000  000dbf14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002bb4 	.word	0x08002bb4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002bb4 	.word	0x08002bb4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b970 	b.w	80004cc <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	460d      	mov	r5, r1
 800020c:	4604      	mov	r4, r0
 800020e:	460f      	mov	r7, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14a      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000214:	428a      	cmp	r2, r1
 8000216:	4694      	mov	ip, r2
 8000218:	d965      	bls.n	80002e6 <__udivmoddi4+0xe2>
 800021a:	fab2 f382 	clz	r3, r2
 800021e:	b143      	cbz	r3, 8000232 <__udivmoddi4+0x2e>
 8000220:	fa02 fc03 	lsl.w	ip, r2, r3
 8000224:	f1c3 0220 	rsb	r2, r3, #32
 8000228:	409f      	lsls	r7, r3
 800022a:	fa20 f202 	lsr.w	r2, r0, r2
 800022e:	4317      	orrs	r7, r2
 8000230:	409c      	lsls	r4, r3
 8000232:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000236:	fa1f f58c 	uxth.w	r5, ip
 800023a:	fbb7 f1fe 	udiv	r1, r7, lr
 800023e:	0c22      	lsrs	r2, r4, #16
 8000240:	fb0e 7711 	mls	r7, lr, r1, r7
 8000244:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000248:	fb01 f005 	mul.w	r0, r1, r5
 800024c:	4290      	cmp	r0, r2
 800024e:	d90a      	bls.n	8000266 <__udivmoddi4+0x62>
 8000250:	eb1c 0202 	adds.w	r2, ip, r2
 8000254:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000258:	f080 811c 	bcs.w	8000494 <__udivmoddi4+0x290>
 800025c:	4290      	cmp	r0, r2
 800025e:	f240 8119 	bls.w	8000494 <__udivmoddi4+0x290>
 8000262:	3902      	subs	r1, #2
 8000264:	4462      	add	r2, ip
 8000266:	1a12      	subs	r2, r2, r0
 8000268:	b2a4      	uxth	r4, r4
 800026a:	fbb2 f0fe 	udiv	r0, r2, lr
 800026e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000272:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000276:	fb00 f505 	mul.w	r5, r0, r5
 800027a:	42a5      	cmp	r5, r4
 800027c:	d90a      	bls.n	8000294 <__udivmoddi4+0x90>
 800027e:	eb1c 0404 	adds.w	r4, ip, r4
 8000282:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000286:	f080 8107 	bcs.w	8000498 <__udivmoddi4+0x294>
 800028a:	42a5      	cmp	r5, r4
 800028c:	f240 8104 	bls.w	8000498 <__udivmoddi4+0x294>
 8000290:	4464      	add	r4, ip
 8000292:	3802      	subs	r0, #2
 8000294:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000298:	1b64      	subs	r4, r4, r5
 800029a:	2100      	movs	r1, #0
 800029c:	b11e      	cbz	r6, 80002a6 <__udivmoddi4+0xa2>
 800029e:	40dc      	lsrs	r4, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	e9c6 4300 	strd	r4, r3, [r6]
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d908      	bls.n	80002c0 <__udivmoddi4+0xbc>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80ed 	beq.w	800048e <__udivmoddi4+0x28a>
 80002b4:	2100      	movs	r1, #0
 80002b6:	e9c6 0500 	strd	r0, r5, [r6]
 80002ba:	4608      	mov	r0, r1
 80002bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c0:	fab3 f183 	clz	r1, r3
 80002c4:	2900      	cmp	r1, #0
 80002c6:	d149      	bne.n	800035c <__udivmoddi4+0x158>
 80002c8:	42ab      	cmp	r3, r5
 80002ca:	d302      	bcc.n	80002d2 <__udivmoddi4+0xce>
 80002cc:	4282      	cmp	r2, r0
 80002ce:	f200 80f8 	bhi.w	80004c2 <__udivmoddi4+0x2be>
 80002d2:	1a84      	subs	r4, r0, r2
 80002d4:	eb65 0203 	sbc.w	r2, r5, r3
 80002d8:	2001      	movs	r0, #1
 80002da:	4617      	mov	r7, r2
 80002dc:	2e00      	cmp	r6, #0
 80002de:	d0e2      	beq.n	80002a6 <__udivmoddi4+0xa2>
 80002e0:	e9c6 4700 	strd	r4, r7, [r6]
 80002e4:	e7df      	b.n	80002a6 <__udivmoddi4+0xa2>
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xe6>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f382 	clz	r3, r2
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	f040 8090 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f4:	1a8a      	subs	r2, r1, r2
 80002f6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fa:	fa1f fe8c 	uxth.w	lr, ip
 80002fe:	2101      	movs	r1, #1
 8000300:	fbb2 f5f7 	udiv	r5, r2, r7
 8000304:	fb07 2015 	mls	r0, r7, r5, r2
 8000308:	0c22      	lsrs	r2, r4, #16
 800030a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800030e:	fb0e f005 	mul.w	r0, lr, r5
 8000312:	4290      	cmp	r0, r2
 8000314:	d908      	bls.n	8000328 <__udivmoddi4+0x124>
 8000316:	eb1c 0202 	adds.w	r2, ip, r2
 800031a:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4290      	cmp	r0, r2
 8000322:	f200 80cb 	bhi.w	80004bc <__udivmoddi4+0x2b8>
 8000326:	4645      	mov	r5, r8
 8000328:	1a12      	subs	r2, r2, r0
 800032a:	b2a4      	uxth	r4, r4
 800032c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000330:	fb07 2210 	mls	r2, r7, r0, r2
 8000334:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000338:	fb0e fe00 	mul.w	lr, lr, r0
 800033c:	45a6      	cmp	lr, r4
 800033e:	d908      	bls.n	8000352 <__udivmoddi4+0x14e>
 8000340:	eb1c 0404 	adds.w	r4, ip, r4
 8000344:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000348:	d202      	bcs.n	8000350 <__udivmoddi4+0x14c>
 800034a:	45a6      	cmp	lr, r4
 800034c:	f200 80bb 	bhi.w	80004c6 <__udivmoddi4+0x2c2>
 8000350:	4610      	mov	r0, r2
 8000352:	eba4 040e 	sub.w	r4, r4, lr
 8000356:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800035a:	e79f      	b.n	800029c <__udivmoddi4+0x98>
 800035c:	f1c1 0720 	rsb	r7, r1, #32
 8000360:	408b      	lsls	r3, r1
 8000362:	fa22 fc07 	lsr.w	ip, r2, r7
 8000366:	ea4c 0c03 	orr.w	ip, ip, r3
 800036a:	fa05 f401 	lsl.w	r4, r5, r1
 800036e:	fa20 f307 	lsr.w	r3, r0, r7
 8000372:	40fd      	lsrs	r5, r7
 8000374:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000378:	4323      	orrs	r3, r4
 800037a:	fbb5 f8f9 	udiv	r8, r5, r9
 800037e:	fa1f fe8c 	uxth.w	lr, ip
 8000382:	fb09 5518 	mls	r5, r9, r8, r5
 8000386:	0c1c      	lsrs	r4, r3, #16
 8000388:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 800038c:	fb08 f50e 	mul.w	r5, r8, lr
 8000390:	42a5      	cmp	r5, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	fa00 f001 	lsl.w	r0, r0, r1
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a4:	f080 8088 	bcs.w	80004b8 <__udivmoddi4+0x2b4>
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	f240 8085 	bls.w	80004b8 <__udivmoddi4+0x2b4>
 80003ae:	f1a8 0802 	sub.w	r8, r8, #2
 80003b2:	4464      	add	r4, ip
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	b29d      	uxth	r5, r3
 80003b8:	fbb4 f3f9 	udiv	r3, r4, r9
 80003bc:	fb09 4413 	mls	r4, r9, r3, r4
 80003c0:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003c4:	fb03 fe0e 	mul.w	lr, r3, lr
 80003c8:	45a6      	cmp	lr, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1c 0404 	adds.w	r4, ip, r4
 80003d0:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003d4:	d26c      	bcs.n	80004b0 <__udivmoddi4+0x2ac>
 80003d6:	45a6      	cmp	lr, r4
 80003d8:	d96a      	bls.n	80004b0 <__udivmoddi4+0x2ac>
 80003da:	3b02      	subs	r3, #2
 80003dc:	4464      	add	r4, ip
 80003de:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003e2:	fba3 9502 	umull	r9, r5, r3, r2
 80003e6:	eba4 040e 	sub.w	r4, r4, lr
 80003ea:	42ac      	cmp	r4, r5
 80003ec:	46c8      	mov	r8, r9
 80003ee:	46ae      	mov	lr, r5
 80003f0:	d356      	bcc.n	80004a0 <__udivmoddi4+0x29c>
 80003f2:	d053      	beq.n	800049c <__udivmoddi4+0x298>
 80003f4:	b156      	cbz	r6, 800040c <__udivmoddi4+0x208>
 80003f6:	ebb0 0208 	subs.w	r2, r0, r8
 80003fa:	eb64 040e 	sbc.w	r4, r4, lr
 80003fe:	fa04 f707 	lsl.w	r7, r4, r7
 8000402:	40ca      	lsrs	r2, r1
 8000404:	40cc      	lsrs	r4, r1
 8000406:	4317      	orrs	r7, r2
 8000408:	e9c6 7400 	strd	r7, r4, [r6]
 800040c:	4618      	mov	r0, r3
 800040e:	2100      	movs	r1, #0
 8000410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000414:	f1c3 0120 	rsb	r1, r3, #32
 8000418:	fa02 fc03 	lsl.w	ip, r2, r3
 800041c:	fa20 f201 	lsr.w	r2, r0, r1
 8000420:	fa25 f101 	lsr.w	r1, r5, r1
 8000424:	409d      	lsls	r5, r3
 8000426:	432a      	orrs	r2, r5
 8000428:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800042c:	fa1f fe8c 	uxth.w	lr, ip
 8000430:	fbb1 f0f7 	udiv	r0, r1, r7
 8000434:	fb07 1510 	mls	r5, r7, r0, r1
 8000438:	0c11      	lsrs	r1, r2, #16
 800043a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800043e:	fb00 f50e 	mul.w	r5, r0, lr
 8000442:	428d      	cmp	r5, r1
 8000444:	fa04 f403 	lsl.w	r4, r4, r3
 8000448:	d908      	bls.n	800045c <__udivmoddi4+0x258>
 800044a:	eb1c 0101 	adds.w	r1, ip, r1
 800044e:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000452:	d22f      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000454:	428d      	cmp	r5, r1
 8000456:	d92d      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 8000458:	3802      	subs	r0, #2
 800045a:	4461      	add	r1, ip
 800045c:	1b49      	subs	r1, r1, r5
 800045e:	b292      	uxth	r2, r2
 8000460:	fbb1 f5f7 	udiv	r5, r1, r7
 8000464:	fb07 1115 	mls	r1, r7, r5, r1
 8000468:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800046c:	fb05 f10e 	mul.w	r1, r5, lr
 8000470:	4291      	cmp	r1, r2
 8000472:	d908      	bls.n	8000486 <__udivmoddi4+0x282>
 8000474:	eb1c 0202 	adds.w	r2, ip, r2
 8000478:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 800047c:	d216      	bcs.n	80004ac <__udivmoddi4+0x2a8>
 800047e:	4291      	cmp	r1, r2
 8000480:	d914      	bls.n	80004ac <__udivmoddi4+0x2a8>
 8000482:	3d02      	subs	r5, #2
 8000484:	4462      	add	r2, ip
 8000486:	1a52      	subs	r2, r2, r1
 8000488:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800048c:	e738      	b.n	8000300 <__udivmoddi4+0xfc>
 800048e:	4631      	mov	r1, r6
 8000490:	4630      	mov	r0, r6
 8000492:	e708      	b.n	80002a6 <__udivmoddi4+0xa2>
 8000494:	4639      	mov	r1, r7
 8000496:	e6e6      	b.n	8000266 <__udivmoddi4+0x62>
 8000498:	4610      	mov	r0, r2
 800049a:	e6fb      	b.n	8000294 <__udivmoddi4+0x90>
 800049c:	4548      	cmp	r0, r9
 800049e:	d2a9      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 80004a0:	ebb9 0802 	subs.w	r8, r9, r2
 80004a4:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004a8:	3b01      	subs	r3, #1
 80004aa:	e7a3      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004ac:	4645      	mov	r5, r8
 80004ae:	e7ea      	b.n	8000486 <__udivmoddi4+0x282>
 80004b0:	462b      	mov	r3, r5
 80004b2:	e794      	b.n	80003de <__udivmoddi4+0x1da>
 80004b4:	4640      	mov	r0, r8
 80004b6:	e7d1      	b.n	800045c <__udivmoddi4+0x258>
 80004b8:	46d0      	mov	r8, sl
 80004ba:	e77b      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004bc:	3d02      	subs	r5, #2
 80004be:	4462      	add	r2, ip
 80004c0:	e732      	b.n	8000328 <__udivmoddi4+0x124>
 80004c2:	4608      	mov	r0, r1
 80004c4:	e70a      	b.n	80002dc <__udivmoddi4+0xd8>
 80004c6:	4464      	add	r4, ip
 80004c8:	3802      	subs	r0, #2
 80004ca:	e742      	b.n	8000352 <__udivmoddi4+0x14e>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b082      	sub	sp, #8
 80004d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d6:	f000 facb 	bl	8000a70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004da:	f000 f83b 	bl	8000554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004de:	f000 f939 	bl	8000754 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e2:	f000 f90d 	bl	8000700 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80004e6:	f000 f895 	bl	8000614 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start( &htim2, TIM_CHANNEL_1 );
 80004ea:	2100      	movs	r1, #0
 80004ec:	4818      	ldr	r0, [pc, #96]	; (8000550 <main+0x80>)
 80004ee:	f001 faff 	bl	8001af0 <HAL_TIM_PWM_Start>
  /* Wack the registers ourself, outside of the HAL */
  TIM2->PSC = 0;
 80004f2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004f6:	2200      	movs	r2, #0
 80004f8:	629a      	str	r2, [r3, #40]	; 0x28
  TIM2->ARR = 60000;
 80004fa:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80004fe:	f64e 2260 	movw	r2, #60000	; 0xea60
 8000502:	62da      	str	r2, [r3, #44]	; 0x2c
  TIM2->CCR1 = 0;
 8000504:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000508:	2200      	movs	r2, #0
 800050a:	635a      	str	r2, [r3, #52]	; 0x34
  int TIM2_Ch1_DCVAL = 0;
 800050c:	2300      	movs	r3, #0
 800050e:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  while(TIM2_Ch1_DCVAL < 60000) {
 8000510:	e009      	b.n	8000526 <main+0x56>
		  TIM2_Ch1_DCVAL += (50);
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	3332      	adds	r3, #50	; 0x32
 8000516:	607b      	str	r3, [r7, #4]
		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
 8000518:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	6353      	str	r3, [r2, #52]	; 0x34
		  HAL_Delay(1);
 8000520:	2001      	movs	r0, #1
 8000522:	f000 fb17 	bl	8000b54 <HAL_Delay>
	  while(TIM2_Ch1_DCVAL < 60000) {
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	f64e 225f 	movw	r2, #59999	; 0xea5f
 800052c:	4293      	cmp	r3, r2
 800052e:	ddf0      	ble.n	8000512 <main+0x42>
	  }
	  while( TIM2_Ch1_DCVAL > 0 ) {
 8000530:	e009      	b.n	8000546 <main+0x76>
		  TIM2_Ch1_DCVAL -= (50);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	3b32      	subs	r3, #50	; 0x32
 8000536:	607b      	str	r3, [r7, #4]
		  TIM2->CCR1 = TIM2_Ch1_DCVAL;
 8000538:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	6353      	str	r3, [r2, #52]	; 0x34
		  HAL_Delay(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f000 fb07 	bl	8000b54 <HAL_Delay>
	  while( TIM2_Ch1_DCVAL > 0 ) {
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	dcf2      	bgt.n	8000532 <main+0x62>
	  while(TIM2_Ch1_DCVAL < 60000) {
 800054c:	e7eb      	b.n	8000526 <main+0x56>
 800054e:	bf00      	nop
 8000550:	20000028 	.word	0x20000028

08000554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000554:	b580      	push	{r7, lr}
 8000556:	b094      	sub	sp, #80	; 0x50
 8000558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800055a:	f107 0320 	add.w	r3, r7, #32
 800055e:	2230      	movs	r2, #48	; 0x30
 8000560:	2100      	movs	r1, #0
 8000562:	4618      	mov	r0, r3
 8000564:	f002 fafa 	bl	8002b5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000568:	f107 030c 	add.w	r3, r7, #12
 800056c:	2200      	movs	r2, #0
 800056e:	601a      	str	r2, [r3, #0]
 8000570:	605a      	str	r2, [r3, #4]
 8000572:	609a      	str	r2, [r3, #8]
 8000574:	60da      	str	r2, [r3, #12]
 8000576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000578:	2300      	movs	r3, #0
 800057a:	60bb      	str	r3, [r7, #8]
 800057c:	4b23      	ldr	r3, [pc, #140]	; (800060c <SystemClock_Config+0xb8>)
 800057e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000580:	4a22      	ldr	r2, [pc, #136]	; (800060c <SystemClock_Config+0xb8>)
 8000582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000586:	6413      	str	r3, [r2, #64]	; 0x40
 8000588:	4b20      	ldr	r3, [pc, #128]	; (800060c <SystemClock_Config+0xb8>)
 800058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800058c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000590:	60bb      	str	r3, [r7, #8]
 8000592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000594:	2300      	movs	r3, #0
 8000596:	607b      	str	r3, [r7, #4]
 8000598:	4b1d      	ldr	r3, [pc, #116]	; (8000610 <SystemClock_Config+0xbc>)
 800059a:	681b      	ldr	r3, [r3, #0]
 800059c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a0:	4a1b      	ldr	r2, [pc, #108]	; (8000610 <SystemClock_Config+0xbc>)
 80005a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005a6:	6013      	str	r3, [r2, #0]
 80005a8:	4b19      	ldr	r3, [pc, #100]	; (8000610 <SystemClock_Config+0xbc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b0:	607b      	str	r3, [r7, #4]
 80005b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005b4:	2302      	movs	r3, #2
 80005b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005b8:	2301      	movs	r3, #1
 80005ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005bc:	2310      	movs	r3, #16
 80005be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005c0:	2300      	movs	r3, #0
 80005c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c4:	f107 0320 	add.w	r3, r7, #32
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fd51 	bl	8001070 <HAL_RCC_OscConfig>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005d4:	f000 f918 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d8:	230f      	movs	r3, #15
 80005da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2100      	movs	r1, #0
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 ffb4 	bl	8001560 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xae>
  {
    Error_Handler();
 80005fe:	f000 f903 	bl	8000808 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	; 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	b08e      	sub	sp, #56	; 0x38
 8000618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800061a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800061e:	2200      	movs	r2, #0
 8000620:	601a      	str	r2, [r3, #0]
 8000622:	605a      	str	r2, [r3, #4]
 8000624:	609a      	str	r2, [r3, #8]
 8000626:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000628:	f107 0320 	add.w	r3, r7, #32
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2200      	movs	r2, #0
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	605a      	str	r2, [r3, #4]
 800063a:	609a      	str	r2, [r3, #8]
 800063c:	60da      	str	r2, [r3, #12]
 800063e:	611a      	str	r2, [r3, #16]
 8000640:	615a      	str	r2, [r3, #20]
 8000642:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000644:	4b2d      	ldr	r3, [pc, #180]	; (80006fc <MX_TIM2_Init+0xe8>)
 8000646:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800064a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16000-1;
 800064c:	4b2b      	ldr	r3, [pc, #172]	; (80006fc <MX_TIM2_Init+0xe8>)
 800064e:	f643 627f 	movw	r2, #15999	; 0x3e7f
 8000652:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <MX_TIM2_Init+0xe8>)
 8000656:	2200      	movs	r2, #0
 8000658:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800065a:	4b28      	ldr	r3, [pc, #160]	; (80006fc <MX_TIM2_Init+0xe8>)
 800065c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8000660:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000662:	4b26      	ldr	r3, [pc, #152]	; (80006fc <MX_TIM2_Init+0xe8>)
 8000664:	2200      	movs	r2, #0
 8000666:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000668:	4b24      	ldr	r3, [pc, #144]	; (80006fc <MX_TIM2_Init+0xe8>)
 800066a:	2280      	movs	r2, #128	; 0x80
 800066c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800066e:	4823      	ldr	r0, [pc, #140]	; (80006fc <MX_TIM2_Init+0xe8>)
 8000670:	f001 f996 	bl	80019a0 <HAL_TIM_Base_Init>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800067a:	f000 f8c5 	bl	8000808 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800067e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000684:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000688:	4619      	mov	r1, r3
 800068a:	481c      	ldr	r0, [pc, #112]	; (80006fc <MX_TIM2_Init+0xe8>)
 800068c:	f001 fba2 	bl	8001dd4 <HAL_TIM_ConfigClockSource>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d001      	beq.n	800069a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000696:	f000 f8b7 	bl	8000808 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800069a:	4818      	ldr	r0, [pc, #96]	; (80006fc <MX_TIM2_Init+0xe8>)
 800069c:	f001 f9cf 	bl	8001a3e <HAL_TIM_PWM_Init>
 80006a0:	4603      	mov	r3, r0
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	d001      	beq.n	80006aa <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80006a6:	f000 f8af 	bl	8000808 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80006aa:	2300      	movs	r3, #0
 80006ac:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80006ae:	2300      	movs	r3, #0
 80006b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80006b2:	f107 0320 	add.w	r3, r7, #32
 80006b6:	4619      	mov	r1, r3
 80006b8:	4810      	ldr	r0, [pc, #64]	; (80006fc <MX_TIM2_Init+0xe8>)
 80006ba:	f001 ff1f 	bl	80024fc <HAL_TIMEx_MasterConfigSynchronization>
 80006be:	4603      	mov	r3, r0
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d001      	beq.n	80006c8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80006c4:	f000 f8a0 	bl	8000808 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 250-1;
 80006cc:	23f9      	movs	r3, #249	; 0xf9
 80006ce:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80006d0:	2300      	movs	r3, #0
 80006d2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80006d8:	1d3b      	adds	r3, r7, #4
 80006da:	2200      	movs	r2, #0
 80006dc:	4619      	mov	r1, r3
 80006de:	4807      	ldr	r0, [pc, #28]	; (80006fc <MX_TIM2_Init+0xe8>)
 80006e0:	f001 fab6 	bl	8001c50 <HAL_TIM_PWM_ConfigChannel>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80006ea:	f000 f88d 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80006ee:	4803      	ldr	r0, [pc, #12]	; (80006fc <MX_TIM2_Init+0xe8>)
 80006f0:	f000 f8d8 	bl	80008a4 <HAL_TIM_MspPostInit>

}
 80006f4:	bf00      	nop
 80006f6:	3738      	adds	r7, #56	; 0x38
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	20000028 	.word	0x20000028

08000700 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000704:	4b11      	ldr	r3, [pc, #68]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000706:	4a12      	ldr	r2, [pc, #72]	; (8000750 <MX_USART2_UART_Init+0x50>)
 8000708:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800070a:	4b10      	ldr	r3, [pc, #64]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800070c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000710:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000712:	4b0e      	ldr	r3, [pc, #56]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000714:	2200      	movs	r2, #0
 8000716:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000718:	4b0c      	ldr	r3, [pc, #48]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800071a:	2200      	movs	r2, #0
 800071c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800071e:	4b0b      	ldr	r3, [pc, #44]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000720:	2200      	movs	r2, #0
 8000722:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000724:	4b09      	ldr	r3, [pc, #36]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000726:	220c      	movs	r2, #12
 8000728:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800072a:	4b08      	ldr	r3, [pc, #32]	; (800074c <MX_USART2_UART_Init+0x4c>)
 800072c:	2200      	movs	r2, #0
 800072e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000732:	2200      	movs	r2, #0
 8000734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000736:	4805      	ldr	r0, [pc, #20]	; (800074c <MX_USART2_UART_Init+0x4c>)
 8000738:	f001 ff4e 	bl	80025d8 <HAL_UART_Init>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000742:	f000 f861 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000746:	bf00      	nop
 8000748:	bd80      	pop	{r7, pc}
 800074a:	bf00      	nop
 800074c:	20000070 	.word	0x20000070
 8000750:	40004400 	.word	0x40004400

08000754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b08a      	sub	sp, #40	; 0x28
 8000758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800075a:	f107 0314 	add.w	r3, r7, #20
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]
 8000766:	60da      	str	r2, [r3, #12]
 8000768:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800076a:	2300      	movs	r3, #0
 800076c:	613b      	str	r3, [r7, #16]
 800076e:	4b24      	ldr	r3, [pc, #144]	; (8000800 <MX_GPIO_Init+0xac>)
 8000770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000772:	4a23      	ldr	r2, [pc, #140]	; (8000800 <MX_GPIO_Init+0xac>)
 8000774:	f043 0304 	orr.w	r3, r3, #4
 8000778:	6313      	str	r3, [r2, #48]	; 0x30
 800077a:	4b21      	ldr	r3, [pc, #132]	; (8000800 <MX_GPIO_Init+0xac>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	f003 0304 	and.w	r3, r3, #4
 8000782:	613b      	str	r3, [r7, #16]
 8000784:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60fb      	str	r3, [r7, #12]
 800078a:	4b1d      	ldr	r3, [pc, #116]	; (8000800 <MX_GPIO_Init+0xac>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1c      	ldr	r2, [pc, #112]	; (8000800 <MX_GPIO_Init+0xac>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1a      	ldr	r3, [pc, #104]	; (8000800 <MX_GPIO_Init+0xac>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60fb      	str	r3, [r7, #12]
 80007a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	4b16      	ldr	r3, [pc, #88]	; (8000800 <MX_GPIO_Init+0xac>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a15      	ldr	r2, [pc, #84]	; (8000800 <MX_GPIO_Init+0xac>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b13      	ldr	r3, [pc, #76]	; (8000800 <MX_GPIO_Init+0xac>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	60bb      	str	r3, [r7, #8]
 80007bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007be:	2300      	movs	r3, #0
 80007c0:	607b      	str	r3, [r7, #4]
 80007c2:	4b0f      	ldr	r3, [pc, #60]	; (8000800 <MX_GPIO_Init+0xac>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a0e      	ldr	r2, [pc, #56]	; (8000800 <MX_GPIO_Init+0xac>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b0c      	ldr	r3, [pc, #48]	; (8000800 <MX_GPIO_Init+0xac>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	607b      	str	r3, [r7, #4]
 80007d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80007da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80007e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80007e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xb0>)
 80007f2:	f000 fab9 	bl	8000d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007f6:	bf00      	nop
 80007f8:	3728      	adds	r7, #40	; 0x28
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	40023800 	.word	0x40023800
 8000804:	40020800 	.word	0x40020800

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	2300      	movs	r3, #0
 800081c:	607b      	str	r3, [r7, #4]
 800081e:	4b10      	ldr	r3, [pc, #64]	; (8000860 <HAL_MspInit+0x4c>)
 8000820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000822:	4a0f      	ldr	r2, [pc, #60]	; (8000860 <HAL_MspInit+0x4c>)
 8000824:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000828:	6453      	str	r3, [r2, #68]	; 0x44
 800082a:	4b0d      	ldr	r3, [pc, #52]	; (8000860 <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000832:	607b      	str	r3, [r7, #4]
 8000834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000836:	2300      	movs	r3, #0
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	4b09      	ldr	r3, [pc, #36]	; (8000860 <HAL_MspInit+0x4c>)
 800083c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800083e:	4a08      	ldr	r2, [pc, #32]	; (8000860 <HAL_MspInit+0x4c>)
 8000840:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000844:	6413      	str	r3, [r2, #64]	; 0x40
 8000846:	4b06      	ldr	r3, [pc, #24]	; (8000860 <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800084e:	603b      	str	r3, [r7, #0]
 8000850:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000852:	2007      	movs	r0, #7
 8000854:	f000 fa54 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000858:	bf00      	nop
 800085a:	3708      	adds	r7, #8
 800085c:	46bd      	mov	sp, r7
 800085e:	bd80      	pop	{r7, pc}
 8000860:	40023800 	.word	0x40023800

08000864 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000864:	b480      	push	{r7}
 8000866:	b085      	sub	sp, #20
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000874:	d10d      	bne.n	8000892 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000876:	2300      	movs	r3, #0
 8000878:	60fb      	str	r3, [r7, #12]
 800087a:	4b09      	ldr	r3, [pc, #36]	; (80008a0 <HAL_TIM_Base_MspInit+0x3c>)
 800087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087e:	4a08      	ldr	r2, [pc, #32]	; (80008a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000880:	f043 0301 	orr.w	r3, r3, #1
 8000884:	6413      	str	r3, [r2, #64]	; 0x40
 8000886:	4b06      	ldr	r3, [pc, #24]	; (80008a0 <HAL_TIM_Base_MspInit+0x3c>)
 8000888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088a:	f003 0301 	and.w	r3, r3, #1
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000892:	bf00      	nop
 8000894:	3714      	adds	r7, #20
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	40023800 	.word	0x40023800

080008a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b088      	sub	sp, #32
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ac:	f107 030c 	add.w	r3, r7, #12
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c4:	d11d      	bne.n	8000902 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	60bb      	str	r3, [r7, #8]
 80008ca:	4b10      	ldr	r3, [pc, #64]	; (800090c <HAL_TIM_MspPostInit+0x68>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	4a0f      	ldr	r2, [pc, #60]	; (800090c <HAL_TIM_MspPostInit+0x68>)
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6313      	str	r3, [r2, #48]	; 0x30
 80008d6:	4b0d      	ldr	r3, [pc, #52]	; (800090c <HAL_TIM_MspPostInit+0x68>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008da:	f003 0301 	and.w	r3, r3, #1
 80008de:	60bb      	str	r3, [r7, #8]
 80008e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80008e2:	2320      	movs	r3, #32
 80008e4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e6:	2302      	movs	r3, #2
 80008e8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008f2:	2301      	movs	r3, #1
 80008f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 030c 	add.w	r3, r7, #12
 80008fa:	4619      	mov	r1, r3
 80008fc:	4804      	ldr	r0, [pc, #16]	; (8000910 <HAL_TIM_MspPostInit+0x6c>)
 80008fe:	f000 fa33 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000902:	bf00      	nop
 8000904:	3720      	adds	r7, #32
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800
 8000910:	40020000 	.word	0x40020000

08000914 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b08a      	sub	sp, #40	; 0x28
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800091c:	f107 0314 	add.w	r3, r7, #20
 8000920:	2200      	movs	r2, #0
 8000922:	601a      	str	r2, [r3, #0]
 8000924:	605a      	str	r2, [r3, #4]
 8000926:	609a      	str	r2, [r3, #8]
 8000928:	60da      	str	r2, [r3, #12]
 800092a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a19      	ldr	r2, [pc, #100]	; (8000998 <HAL_UART_MspInit+0x84>)
 8000932:	4293      	cmp	r3, r2
 8000934:	d12b      	bne.n	800098e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000936:	2300      	movs	r3, #0
 8000938:	613b      	str	r3, [r7, #16]
 800093a:	4b18      	ldr	r3, [pc, #96]	; (800099c <HAL_UART_MspInit+0x88>)
 800093c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800093e:	4a17      	ldr	r2, [pc, #92]	; (800099c <HAL_UART_MspInit+0x88>)
 8000940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000944:	6413      	str	r3, [r2, #64]	; 0x40
 8000946:	4b15      	ldr	r3, [pc, #84]	; (800099c <HAL_UART_MspInit+0x88>)
 8000948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800094a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800094e:	613b      	str	r3, [r7, #16]
 8000950:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	60fb      	str	r3, [r7, #12]
 8000956:	4b11      	ldr	r3, [pc, #68]	; (800099c <HAL_UART_MspInit+0x88>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	4a10      	ldr	r2, [pc, #64]	; (800099c <HAL_UART_MspInit+0x88>)
 800095c:	f043 0301 	orr.w	r3, r3, #1
 8000960:	6313      	str	r3, [r2, #48]	; 0x30
 8000962:	4b0e      	ldr	r3, [pc, #56]	; (800099c <HAL_UART_MspInit+0x88>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000966:	f003 0301 	and.w	r3, r3, #1
 800096a:	60fb      	str	r3, [r7, #12]
 800096c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800096e:	230c      	movs	r3, #12
 8000970:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000972:	2302      	movs	r3, #2
 8000974:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800097a:	2300      	movs	r3, #0
 800097c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800097e:	2307      	movs	r3, #7
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000982:	f107 0314 	add.w	r3, r7, #20
 8000986:	4619      	mov	r1, r3
 8000988:	4805      	ldr	r0, [pc, #20]	; (80009a0 <HAL_UART_MspInit+0x8c>)
 800098a:	f000 f9ed 	bl	8000d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800098e:	bf00      	nop
 8000990:	3728      	adds	r7, #40	; 0x28
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40004400 	.word	0x40004400
 800099c:	40023800 	.word	0x40023800
 80009a0:	40020000 	.word	0x40020000

080009a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009a8:	e7fe      	b.n	80009a8 <NMI_Handler+0x4>

080009aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009ae:	e7fe      	b.n	80009ae <HardFault_Handler+0x4>

080009b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b4:	e7fe      	b.n	80009b4 <MemManage_Handler+0x4>

080009b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b6:	b480      	push	{r7}
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009ba:	e7fe      	b.n	80009ba <BusFault_Handler+0x4>

080009bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009c0:	e7fe      	b.n	80009c0 <UsageFault_Handler+0x4>

080009c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009c2:	b480      	push	{r7}
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c6:	bf00      	nop
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009d0:	b480      	push	{r7}
 80009d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr

080009de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009de:	b480      	push	{r7}
 80009e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009e2:	bf00      	nop
 80009e4:	46bd      	mov	sp, r7
 80009e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ea:	4770      	bx	lr

080009ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009f0:	f000 f890 	bl	8000b14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009f4:	bf00      	nop
 80009f6:	bd80      	pop	{r7, pc}

080009f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <SystemInit+0x20>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a05      	ldr	r2, [pc, #20]	; (8000a18 <SystemInit+0x20>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	e000ed00 	.word	0xe000ed00

08000a1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000a20:	480d      	ldr	r0, [pc, #52]	; (8000a58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000a22:	490e      	ldr	r1, [pc, #56]	; (8000a5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000a24:	4a0e      	ldr	r2, [pc, #56]	; (8000a60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000a26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a28:	e002      	b.n	8000a30 <LoopCopyDataInit>

08000a2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a2e:	3304      	adds	r3, #4

08000a30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a34:	d3f9      	bcc.n	8000a2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a36:	4a0b      	ldr	r2, [pc, #44]	; (8000a64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000a38:	4c0b      	ldr	r4, [pc, #44]	; (8000a68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000a3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a3c:	e001      	b.n	8000a42 <LoopFillZerobss>

08000a3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a40:	3204      	adds	r2, #4

08000a42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a44:	d3fb      	bcc.n	8000a3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a46:	f7ff ffd7 	bl	80009f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f002 f88f 	bl	8002b6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a4e:	f7ff fd3f 	bl	80004d0 <main>
  bx  lr    
 8000a52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000a54:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a60:	08002bf4 	.word	0x08002bf4
  ldr r2, =_sbss
 8000a64:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a68:	200000b8 	.word	0x200000b8

08000a6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC_IRQHandler>
	...

08000a70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_Init+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a0d      	ldr	r2, [pc, #52]	; (8000ab0 <HAL_Init+0x40>)
 8000a7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a80:	4b0b      	ldr	r3, [pc, #44]	; (8000ab0 <HAL_Init+0x40>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	4a0a      	ldr	r2, [pc, #40]	; (8000ab0 <HAL_Init+0x40>)
 8000a86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a8c:	4b08      	ldr	r3, [pc, #32]	; (8000ab0 <HAL_Init+0x40>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a07      	ldr	r2, [pc, #28]	; (8000ab0 <HAL_Init+0x40>)
 8000a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a98:	2003      	movs	r0, #3
 8000a9a:	f000 f931 	bl	8000d00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a9e:	2000      	movs	r0, #0
 8000aa0:	f000 f808 	bl	8000ab4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000aa4:	f7ff feb6 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000aa8:	2300      	movs	r3, #0
}
 8000aaa:	4618      	mov	r0, r3
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40023c00 	.word	0x40023c00

08000ab4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000abc:	4b12      	ldr	r3, [pc, #72]	; (8000b08 <HAL_InitTick+0x54>)
 8000abe:	681a      	ldr	r2, [r3, #0]
 8000ac0:	4b12      	ldr	r3, [pc, #72]	; (8000b0c <HAL_InitTick+0x58>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f000 f93b 	bl	8000d4e <HAL_SYSTICK_Config>
 8000ad8:	4603      	mov	r3, r0
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d001      	beq.n	8000ae2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e00e      	b.n	8000b00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	2b0f      	cmp	r3, #15
 8000ae6:	d80a      	bhi.n	8000afe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ae8:	2200      	movs	r2, #0
 8000aea:	6879      	ldr	r1, [r7, #4]
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000af0:	f000 f911 	bl	8000d16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000af4:	4a06      	ldr	r2, [pc, #24]	; (8000b10 <HAL_InitTick+0x5c>)
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000afa:	2300      	movs	r3, #0
 8000afc:	e000      	b.n	8000b00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000afe:	2301      	movs	r3, #1
}
 8000b00:	4618      	mov	r0, r3
 8000b02:	3708      	adds	r7, #8
 8000b04:	46bd      	mov	sp, r7
 8000b06:	bd80      	pop	{r7, pc}
 8000b08:	20000000 	.word	0x20000000
 8000b0c:	20000008 	.word	0x20000008
 8000b10:	20000004 	.word	0x20000004

08000b14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <HAL_IncTick+0x20>)
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <HAL_IncTick+0x24>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4413      	add	r3, r2
 8000b24:	4a04      	ldr	r2, [pc, #16]	; (8000b38 <HAL_IncTick+0x24>)
 8000b26:	6013      	str	r3, [r2, #0]
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	20000008 	.word	0x20000008
 8000b38:	200000b4 	.word	0x200000b4

08000b3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b40:	4b03      	ldr	r3, [pc, #12]	; (8000b50 <HAL_GetTick+0x14>)
 8000b42:	681b      	ldr	r3, [r3, #0]
}
 8000b44:	4618      	mov	r0, r3
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	200000b4 	.word	0x200000b4

08000b54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b084      	sub	sp, #16
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b5c:	f7ff ffee 	bl	8000b3c <HAL_GetTick>
 8000b60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000b6c:	d005      	beq.n	8000b7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Delay+0x44>)
 8000b70:	781b      	ldrb	r3, [r3, #0]
 8000b72:	461a      	mov	r2, r3
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	4413      	add	r3, r2
 8000b78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b7a:	bf00      	nop
 8000b7c:	f7ff ffde 	bl	8000b3c <HAL_GetTick>
 8000b80:	4602      	mov	r2, r0
 8000b82:	68bb      	ldr	r3, [r7, #8]
 8000b84:	1ad3      	subs	r3, r2, r3
 8000b86:	68fa      	ldr	r2, [r7, #12]
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d8f7      	bhi.n	8000b7c <HAL_Delay+0x28>
  {
  }
}
 8000b8c:	bf00      	nop
 8000b8e:	bf00      	nop
 8000b90:	3710      	adds	r7, #16
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000008 	.word	0x20000008

08000b9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	f003 0307 	and.w	r3, r3, #7
 8000baa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bac:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bae:	68db      	ldr	r3, [r3, #12]
 8000bb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bb2:	68ba      	ldr	r2, [r7, #8]
 8000bb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bb8:	4013      	ands	r3, r2
 8000bba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bc0:	68bb      	ldr	r3, [r7, #8]
 8000bc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bcc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bce:	4a04      	ldr	r2, [pc, #16]	; (8000be0 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd0:	68bb      	ldr	r3, [r7, #8]
 8000bd2:	60d3      	str	r3, [r2, #12]
}
 8000bd4:	bf00      	nop
 8000bd6:	3714      	adds	r7, #20
 8000bd8:	46bd      	mov	sp, r7
 8000bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bde:	4770      	bx	lr
 8000be0:	e000ed00 	.word	0xe000ed00

08000be4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000be4:	b480      	push	{r7}
 8000be6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000be8:	4b04      	ldr	r3, [pc, #16]	; (8000bfc <__NVIC_GetPriorityGrouping+0x18>)
 8000bea:	68db      	ldr	r3, [r3, #12]
 8000bec:	0a1b      	lsrs	r3, r3, #8
 8000bee:	f003 0307 	and.w	r3, r3, #7
}
 8000bf2:	4618      	mov	r0, r3
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr
 8000bfc:	e000ed00 	.word	0xe000ed00

08000c00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c00:	b480      	push	{r7}
 8000c02:	b083      	sub	sp, #12
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	4603      	mov	r3, r0
 8000c08:	6039      	str	r1, [r7, #0]
 8000c0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	db0a      	blt.n	8000c2a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c14:	683b      	ldr	r3, [r7, #0]
 8000c16:	b2da      	uxtb	r2, r3
 8000c18:	490c      	ldr	r1, [pc, #48]	; (8000c4c <__NVIC_SetPriority+0x4c>)
 8000c1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c1e:	0112      	lsls	r2, r2, #4
 8000c20:	b2d2      	uxtb	r2, r2
 8000c22:	440b      	add	r3, r1
 8000c24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c28:	e00a      	b.n	8000c40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c2a:	683b      	ldr	r3, [r7, #0]
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4908      	ldr	r1, [pc, #32]	; (8000c50 <__NVIC_SetPriority+0x50>)
 8000c30:	79fb      	ldrb	r3, [r7, #7]
 8000c32:	f003 030f 	and.w	r3, r3, #15
 8000c36:	3b04      	subs	r3, #4
 8000c38:	0112      	lsls	r2, r2, #4
 8000c3a:	b2d2      	uxtb	r2, r2
 8000c3c:	440b      	add	r3, r1
 8000c3e:	761a      	strb	r2, [r3, #24]
}
 8000c40:	bf00      	nop
 8000c42:	370c      	adds	r7, #12
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	e000e100 	.word	0xe000e100
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b089      	sub	sp, #36	; 0x24
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	60f8      	str	r0, [r7, #12]
 8000c5c:	60b9      	str	r1, [r7, #8]
 8000c5e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	f003 0307 	and.w	r3, r3, #7
 8000c66:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c68:	69fb      	ldr	r3, [r7, #28]
 8000c6a:	f1c3 0307 	rsb	r3, r3, #7
 8000c6e:	2b04      	cmp	r3, #4
 8000c70:	bf28      	it	cs
 8000c72:	2304      	movcs	r3, #4
 8000c74:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c76:	69fb      	ldr	r3, [r7, #28]
 8000c78:	3304      	adds	r3, #4
 8000c7a:	2b06      	cmp	r3, #6
 8000c7c:	d902      	bls.n	8000c84 <NVIC_EncodePriority+0x30>
 8000c7e:	69fb      	ldr	r3, [r7, #28]
 8000c80:	3b03      	subs	r3, #3
 8000c82:	e000      	b.n	8000c86 <NVIC_EncodePriority+0x32>
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c8c:	69bb      	ldr	r3, [r7, #24]
 8000c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c92:	43da      	mvns	r2, r3
 8000c94:	68bb      	ldr	r3, [r7, #8]
 8000c96:	401a      	ands	r2, r3
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c9c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ca0:	697b      	ldr	r3, [r7, #20]
 8000ca2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ca6:	43d9      	mvns	r1, r3
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	4313      	orrs	r3, r2
         );
}
 8000cae:	4618      	mov	r0, r3
 8000cb0:	3724      	adds	r7, #36	; 0x24
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb8:	4770      	bx	lr
	...

08000cbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	3b01      	subs	r3, #1
 8000cc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ccc:	d301      	bcc.n	8000cd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00f      	b.n	8000cf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cd2:	4a0a      	ldr	r2, [pc, #40]	; (8000cfc <SysTick_Config+0x40>)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	3b01      	subs	r3, #1
 8000cd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cda:	210f      	movs	r1, #15
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ce0:	f7ff ff8e 	bl	8000c00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <SysTick_Config+0x40>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cea:	4b04      	ldr	r3, [pc, #16]	; (8000cfc <SysTick_Config+0x40>)
 8000cec:	2207      	movs	r2, #7
 8000cee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cf0:	2300      	movs	r3, #0
}
 8000cf2:	4618      	mov	r0, r3
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	e000e010 	.word	0xe000e010

08000d00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d08:	6878      	ldr	r0, [r7, #4]
 8000d0a:	f7ff ff47 	bl	8000b9c <__NVIC_SetPriorityGrouping>
}
 8000d0e:	bf00      	nop
 8000d10:	3708      	adds	r7, #8
 8000d12:	46bd      	mov	sp, r7
 8000d14:	bd80      	pop	{r7, pc}

08000d16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d16:	b580      	push	{r7, lr}
 8000d18:	b086      	sub	sp, #24
 8000d1a:	af00      	add	r7, sp, #0
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	60b9      	str	r1, [r7, #8]
 8000d20:	607a      	str	r2, [r7, #4]
 8000d22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d24:	2300      	movs	r3, #0
 8000d26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d28:	f7ff ff5c 	bl	8000be4 <__NVIC_GetPriorityGrouping>
 8000d2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d2e:	687a      	ldr	r2, [r7, #4]
 8000d30:	68b9      	ldr	r1, [r7, #8]
 8000d32:	6978      	ldr	r0, [r7, #20]
 8000d34:	f7ff ff8e 	bl	8000c54 <NVIC_EncodePriority>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d3e:	4611      	mov	r1, r2
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff ff5d 	bl	8000c00 <__NVIC_SetPriority>
}
 8000d46:	bf00      	nop
 8000d48:	3718      	adds	r7, #24
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bd80      	pop	{r7, pc}

08000d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d4e:	b580      	push	{r7, lr}
 8000d50:	b082      	sub	sp, #8
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d56:	6878      	ldr	r0, [r7, #4]
 8000d58:	f7ff ffb0 	bl	8000cbc <SysTick_Config>
 8000d5c:	4603      	mov	r3, r0
}
 8000d5e:	4618      	mov	r0, r3
 8000d60:	3708      	adds	r7, #8
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
	...

08000d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d72:	2300      	movs	r3, #0
 8000d74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d7e:	2300      	movs	r3, #0
 8000d80:	61fb      	str	r3, [r7, #28]
 8000d82:	e159      	b.n	8001038 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d84:	2201      	movs	r2, #1
 8000d86:	69fb      	ldr	r3, [r7, #28]
 8000d88:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	697a      	ldr	r2, [r7, #20]
 8000d94:	4013      	ands	r3, r2
 8000d96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d98:	693a      	ldr	r2, [r7, #16]
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	f040 8148 	bne.w	8001032 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	685b      	ldr	r3, [r3, #4]
 8000da6:	f003 0303 	and.w	r3, r3, #3
 8000daa:	2b01      	cmp	r3, #1
 8000dac:	d005      	beq.n	8000dba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	685b      	ldr	r3, [r3, #4]
 8000db2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000db6:	2b02      	cmp	r3, #2
 8000db8:	d130      	bne.n	8000e1c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	689b      	ldr	r3, [r3, #8]
 8000dbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	2203      	movs	r2, #3
 8000dc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dca:	43db      	mvns	r3, r3
 8000dcc:	69ba      	ldr	r2, [r7, #24]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	68da      	ldr	r2, [r3, #12]
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	005b      	lsls	r3, r3, #1
 8000dda:	fa02 f303 	lsl.w	r3, r2, r3
 8000dde:	69ba      	ldr	r2, [r7, #24]
 8000de0:	4313      	orrs	r3, r2
 8000de2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69ba      	ldr	r2, [r7, #24]
 8000de8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000df0:	2201      	movs	r2, #1
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	fa02 f303 	lsl.w	r3, r2, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	69ba      	ldr	r2, [r7, #24]
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e00:	683b      	ldr	r3, [r7, #0]
 8000e02:	685b      	ldr	r3, [r3, #4]
 8000e04:	091b      	lsrs	r3, r3, #4
 8000e06:	f003 0201 	and.w	r2, r3, #1
 8000e0a:	69fb      	ldr	r3, [r7, #28]
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	69ba      	ldr	r2, [r7, #24]
 8000e12:	4313      	orrs	r3, r2
 8000e14:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	69ba      	ldr	r2, [r7, #24]
 8000e1a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	685b      	ldr	r3, [r3, #4]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	2b03      	cmp	r3, #3
 8000e26:	d017      	beq.n	8000e58 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	68db      	ldr	r3, [r3, #12]
 8000e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	2203      	movs	r2, #3
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	69ba      	ldr	r2, [r7, #24]
 8000e3c:	4013      	ands	r3, r2
 8000e3e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	689a      	ldr	r2, [r3, #8]
 8000e44:	69fb      	ldr	r3, [r7, #28]
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4313      	orrs	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e58:	683b      	ldr	r3, [r7, #0]
 8000e5a:	685b      	ldr	r3, [r3, #4]
 8000e5c:	f003 0303 	and.w	r3, r3, #3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d123      	bne.n	8000eac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	08da      	lsrs	r2, r3, #3
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	3208      	adds	r2, #8
 8000e6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e72:	69fb      	ldr	r3, [r7, #28]
 8000e74:	f003 0307 	and.w	r3, r3, #7
 8000e78:	009b      	lsls	r3, r3, #2
 8000e7a:	220f      	movs	r2, #15
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	43db      	mvns	r3, r3
 8000e82:	69ba      	ldr	r2, [r7, #24]
 8000e84:	4013      	ands	r3, r2
 8000e86:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	691a      	ldr	r2, [r3, #16]
 8000e8c:	69fb      	ldr	r3, [r7, #28]
 8000e8e:	f003 0307 	and.w	r3, r3, #7
 8000e92:	009b      	lsls	r3, r3, #2
 8000e94:	fa02 f303 	lsl.w	r3, r2, r3
 8000e98:	69ba      	ldr	r2, [r7, #24]
 8000e9a:	4313      	orrs	r3, r2
 8000e9c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	08da      	lsrs	r2, r3, #3
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	3208      	adds	r2, #8
 8000ea6:	69b9      	ldr	r1, [r7, #24]
 8000ea8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000eb2:	69fb      	ldr	r3, [r7, #28]
 8000eb4:	005b      	lsls	r3, r3, #1
 8000eb6:	2203      	movs	r2, #3
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	43db      	mvns	r3, r3
 8000ebe:	69ba      	ldr	r2, [r7, #24]
 8000ec0:	4013      	ands	r3, r2
 8000ec2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ec4:	683b      	ldr	r3, [r7, #0]
 8000ec6:	685b      	ldr	r3, [r3, #4]
 8000ec8:	f003 0203 	and.w	r2, r3, #3
 8000ecc:	69fb      	ldr	r3, [r7, #28]
 8000ece:	005b      	lsls	r3, r3, #1
 8000ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed4:	69ba      	ldr	r2, [r7, #24]
 8000ed6:	4313      	orrs	r3, r2
 8000ed8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	f000 80a2 	beq.w	8001032 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b57      	ldr	r3, [pc, #348]	; (8001050 <HAL_GPIO_Init+0x2e8>)
 8000ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ef6:	4a56      	ldr	r2, [pc, #344]	; (8001050 <HAL_GPIO_Init+0x2e8>)
 8000ef8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000efc:	6453      	str	r3, [r2, #68]	; 0x44
 8000efe:	4b54      	ldr	r3, [pc, #336]	; (8001050 <HAL_GPIO_Init+0x2e8>)
 8000f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f02:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f0a:	4a52      	ldr	r2, [pc, #328]	; (8001054 <HAL_GPIO_Init+0x2ec>)
 8000f0c:	69fb      	ldr	r3, [r7, #28]
 8000f0e:	089b      	lsrs	r3, r3, #2
 8000f10:	3302      	adds	r3, #2
 8000f12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f18:	69fb      	ldr	r3, [r7, #28]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	220f      	movs	r2, #15
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	69ba      	ldr	r2, [r7, #24]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4a49      	ldr	r2, [pc, #292]	; (8001058 <HAL_GPIO_Init+0x2f0>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d019      	beq.n	8000f6a <HAL_GPIO_Init+0x202>
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	4a48      	ldr	r2, [pc, #288]	; (800105c <HAL_GPIO_Init+0x2f4>)
 8000f3a:	4293      	cmp	r3, r2
 8000f3c:	d013      	beq.n	8000f66 <HAL_GPIO_Init+0x1fe>
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	4a47      	ldr	r2, [pc, #284]	; (8001060 <HAL_GPIO_Init+0x2f8>)
 8000f42:	4293      	cmp	r3, r2
 8000f44:	d00d      	beq.n	8000f62 <HAL_GPIO_Init+0x1fa>
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	4a46      	ldr	r2, [pc, #280]	; (8001064 <HAL_GPIO_Init+0x2fc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d007      	beq.n	8000f5e <HAL_GPIO_Init+0x1f6>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	4a45      	ldr	r2, [pc, #276]	; (8001068 <HAL_GPIO_Init+0x300>)
 8000f52:	4293      	cmp	r3, r2
 8000f54:	d101      	bne.n	8000f5a <HAL_GPIO_Init+0x1f2>
 8000f56:	2304      	movs	r3, #4
 8000f58:	e008      	b.n	8000f6c <HAL_GPIO_Init+0x204>
 8000f5a:	2307      	movs	r3, #7
 8000f5c:	e006      	b.n	8000f6c <HAL_GPIO_Init+0x204>
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e004      	b.n	8000f6c <HAL_GPIO_Init+0x204>
 8000f62:	2302      	movs	r3, #2
 8000f64:	e002      	b.n	8000f6c <HAL_GPIO_Init+0x204>
 8000f66:	2301      	movs	r3, #1
 8000f68:	e000      	b.n	8000f6c <HAL_GPIO_Init+0x204>
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	69fa      	ldr	r2, [r7, #28]
 8000f6e:	f002 0203 	and.w	r2, r2, #3
 8000f72:	0092      	lsls	r2, r2, #2
 8000f74:	4093      	lsls	r3, r2
 8000f76:	69ba      	ldr	r2, [r7, #24]
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f7c:	4935      	ldr	r1, [pc, #212]	; (8001054 <HAL_GPIO_Init+0x2ec>)
 8000f7e:	69fb      	ldr	r3, [r7, #28]
 8000f80:	089b      	lsrs	r3, r3, #2
 8000f82:	3302      	adds	r3, #2
 8000f84:	69ba      	ldr	r2, [r7, #24]
 8000f86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f8a:	4b38      	ldr	r3, [pc, #224]	; (800106c <HAL_GPIO_Init+0x304>)
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	43db      	mvns	r3, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4013      	ands	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d003      	beq.n	8000fae <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000fa6:	69ba      	ldr	r2, [r7, #24]
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000fae:	4a2f      	ldr	r2, [pc, #188]	; (800106c <HAL_GPIO_Init+0x304>)
 8000fb0:	69bb      	ldr	r3, [r7, #24]
 8000fb2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000fb4:	4b2d      	ldr	r3, [pc, #180]	; (800106c <HAL_GPIO_Init+0x304>)
 8000fb6:	68db      	ldr	r3, [r3, #12]
 8000fb8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fba:	693b      	ldr	r3, [r7, #16]
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	685b      	ldr	r3, [r3, #4]
 8000fc8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d003      	beq.n	8000fd8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	693b      	ldr	r3, [r7, #16]
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000fd8:	4a24      	ldr	r2, [pc, #144]	; (800106c <HAL_GPIO_Init+0x304>)
 8000fda:	69bb      	ldr	r3, [r7, #24]
 8000fdc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000fde:	4b23      	ldr	r3, [pc, #140]	; (800106c <HAL_GPIO_Init+0x304>)
 8000fe0:	685b      	ldr	r3, [r3, #4]
 8000fe2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fe4:	693b      	ldr	r3, [r7, #16]
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	69ba      	ldr	r2, [r7, #24]
 8000fea:	4013      	ands	r3, r2
 8000fec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d003      	beq.n	8001002 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000ffa:	69ba      	ldr	r2, [r7, #24]
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001002:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_GPIO_Init+0x304>)
 8001004:	69bb      	ldr	r3, [r7, #24]
 8001006:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_GPIO_Init+0x304>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800100e:	693b      	ldr	r3, [r7, #16]
 8001010:	43db      	mvns	r3, r3
 8001012:	69ba      	ldr	r2, [r7, #24]
 8001014:	4013      	ands	r3, r2
 8001016:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001020:	2b00      	cmp	r3, #0
 8001022:	d003      	beq.n	800102c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001024:	69ba      	ldr	r2, [r7, #24]
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4313      	orrs	r3, r2
 800102a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800102c:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_GPIO_Init+0x304>)
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	3301      	adds	r3, #1
 8001036:	61fb      	str	r3, [r7, #28]
 8001038:	69fb      	ldr	r3, [r7, #28]
 800103a:	2b0f      	cmp	r3, #15
 800103c:	f67f aea2 	bls.w	8000d84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3724      	adds	r7, #36	; 0x24
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	40023800 	.word	0x40023800
 8001054:	40013800 	.word	0x40013800
 8001058:	40020000 	.word	0x40020000
 800105c:	40020400 	.word	0x40020400
 8001060:	40020800 	.word	0x40020800
 8001064:	40020c00 	.word	0x40020c00
 8001068:	40021000 	.word	0x40021000
 800106c:	40013c00 	.word	0x40013c00

08001070 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b086      	sub	sp, #24
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d101      	bne.n	8001082 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e267      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	2b00      	cmp	r3, #0
 800108c:	d075      	beq.n	800117a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	4b88      	ldr	r3, [pc, #544]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	f003 030c 	and.w	r3, r3, #12
 8001096:	2b04      	cmp	r3, #4
 8001098:	d00c      	beq.n	80010b4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800109a:	4b85      	ldr	r3, [pc, #532]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80010a2:	2b08      	cmp	r3, #8
 80010a4:	d112      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80010a6:	4b82      	ldr	r3, [pc, #520]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80010b2:	d10b      	bne.n	80010cc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010b4:	4b7e      	ldr	r3, [pc, #504]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d05b      	beq.n	8001178 <HAL_RCC_OscConfig+0x108>
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	685b      	ldr	r3, [r3, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d157      	bne.n	8001178 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e242      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010d4:	d106      	bne.n	80010e4 <HAL_RCC_OscConfig+0x74>
 80010d6:	4b76      	ldr	r3, [pc, #472]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	4a75      	ldr	r2, [pc, #468]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010e0:	6013      	str	r3, [r2, #0]
 80010e2:	e01d      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	685b      	ldr	r3, [r3, #4]
 80010e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010ec:	d10c      	bne.n	8001108 <HAL_RCC_OscConfig+0x98>
 80010ee:	4b70      	ldr	r3, [pc, #448]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4a6f      	ldr	r2, [pc, #444]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010f8:	6013      	str	r3, [r2, #0]
 80010fa:	4b6d      	ldr	r3, [pc, #436]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a6c      	ldr	r2, [pc, #432]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001100:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001104:	6013      	str	r3, [r2, #0]
 8001106:	e00b      	b.n	8001120 <HAL_RCC_OscConfig+0xb0>
 8001108:	4b69      	ldr	r3, [pc, #420]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a68      	ldr	r2, [pc, #416]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800110e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b66      	ldr	r3, [pc, #408]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	4a65      	ldr	r2, [pc, #404]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800111a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800111e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d013      	beq.n	8001150 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff fd08 	bl	8000b3c <HAL_GetTick>
 800112c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	e008      	b.n	8001142 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001130:	f7ff fd04 	bl	8000b3c <HAL_GetTick>
 8001134:	4602      	mov	r2, r0
 8001136:	693b      	ldr	r3, [r7, #16]
 8001138:	1ad3      	subs	r3, r2, r3
 800113a:	2b64      	cmp	r3, #100	; 0x64
 800113c:	d901      	bls.n	8001142 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800113e:	2303      	movs	r3, #3
 8001140:	e207      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001142:	4b5b      	ldr	r3, [pc, #364]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d0f0      	beq.n	8001130 <HAL_RCC_OscConfig+0xc0>
 800114e:	e014      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001150:	f7ff fcf4 	bl	8000b3c <HAL_GetTick>
 8001154:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	e008      	b.n	800116a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001158:	f7ff fcf0 	bl	8000b3c <HAL_GetTick>
 800115c:	4602      	mov	r2, r0
 800115e:	693b      	ldr	r3, [r7, #16]
 8001160:	1ad3      	subs	r3, r2, r3
 8001162:	2b64      	cmp	r3, #100	; 0x64
 8001164:	d901      	bls.n	800116a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001166:	2303      	movs	r3, #3
 8001168:	e1f3      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800116a:	4b51      	ldr	r3, [pc, #324]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001172:	2b00      	cmp	r3, #0
 8001174:	d1f0      	bne.n	8001158 <HAL_RCC_OscConfig+0xe8>
 8001176:	e000      	b.n	800117a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001178:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f003 0302 	and.w	r3, r3, #2
 8001182:	2b00      	cmp	r3, #0
 8001184:	d063      	beq.n	800124e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	4b4a      	ldr	r3, [pc, #296]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001188:	689b      	ldr	r3, [r3, #8]
 800118a:	f003 030c 	and.w	r3, r3, #12
 800118e:	2b00      	cmp	r3, #0
 8001190:	d00b      	beq.n	80011aa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001192:	4b47      	ldr	r3, [pc, #284]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001194:	689b      	ldr	r3, [r3, #8]
 8001196:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800119a:	2b08      	cmp	r3, #8
 800119c:	d11c      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800119e:	4b44      	ldr	r3, [pc, #272]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d116      	bne.n	80011d8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011aa:	4b41      	ldr	r3, [pc, #260]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f003 0302 	and.w	r3, r3, #2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d005      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d001      	beq.n	80011c2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011be:	2301      	movs	r3, #1
 80011c0:	e1c7      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c2:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	691b      	ldr	r3, [r3, #16]
 80011ce:	00db      	lsls	r3, r3, #3
 80011d0:	4937      	ldr	r1, [pc, #220]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 80011d2:	4313      	orrs	r3, r2
 80011d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011d6:	e03a      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	68db      	ldr	r3, [r3, #12]
 80011dc:	2b00      	cmp	r3, #0
 80011de:	d020      	beq.n	8001222 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 80011e2:	2201      	movs	r2, #1
 80011e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011e6:	f7ff fca9 	bl	8000b3c <HAL_GetTick>
 80011ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	e008      	b.n	8001200 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011ee:	f7ff fca5 	bl	8000b3c <HAL_GetTick>
 80011f2:	4602      	mov	r2, r0
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	1ad3      	subs	r3, r2, r3
 80011f8:	2b02      	cmp	r3, #2
 80011fa:	d901      	bls.n	8001200 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011fc:	2303      	movs	r3, #3
 80011fe:	e1a8      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001200:	4b2b      	ldr	r3, [pc, #172]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f003 0302 	and.w	r3, r3, #2
 8001208:	2b00      	cmp	r3, #0
 800120a:	d0f0      	beq.n	80011ee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800120c:	4b28      	ldr	r3, [pc, #160]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	691b      	ldr	r3, [r3, #16]
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4925      	ldr	r1, [pc, #148]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 800121c:	4313      	orrs	r3, r2
 800121e:	600b      	str	r3, [r1, #0]
 8001220:	e015      	b.n	800124e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001222:	4b24      	ldr	r3, [pc, #144]	; (80012b4 <HAL_RCC_OscConfig+0x244>)
 8001224:	2200      	movs	r2, #0
 8001226:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001228:	f7ff fc88 	bl	8000b3c <HAL_GetTick>
 800122c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e008      	b.n	8001242 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fc84 	bl	8000b3c <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	693b      	ldr	r3, [r7, #16]
 8001238:	1ad3      	subs	r3, r2, r3
 800123a:	2b02      	cmp	r3, #2
 800123c:	d901      	bls.n	8001242 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800123e:	2303      	movs	r3, #3
 8001240:	e187      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001242:	4b1b      	ldr	r3, [pc, #108]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	f003 0302 	and.w	r3, r3, #2
 800124a:	2b00      	cmp	r3, #0
 800124c:	d1f0      	bne.n	8001230 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	f003 0308 	and.w	r3, r3, #8
 8001256:	2b00      	cmp	r3, #0
 8001258:	d036      	beq.n	80012c8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	695b      	ldr	r3, [r3, #20]
 800125e:	2b00      	cmp	r3, #0
 8001260:	d016      	beq.n	8001290 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001262:	4b15      	ldr	r3, [pc, #84]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001264:	2201      	movs	r2, #1
 8001266:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001268:	f7ff fc68 	bl	8000b3c <HAL_GetTick>
 800126c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	e008      	b.n	8001282 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001270:	f7ff fc64 	bl	8000b3c <HAL_GetTick>
 8001274:	4602      	mov	r2, r0
 8001276:	693b      	ldr	r3, [r7, #16]
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	2b02      	cmp	r3, #2
 800127c:	d901      	bls.n	8001282 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800127e:	2303      	movs	r3, #3
 8001280:	e167      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001282:	4b0b      	ldr	r3, [pc, #44]	; (80012b0 <HAL_RCC_OscConfig+0x240>)
 8001284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001286:	f003 0302 	and.w	r3, r3, #2
 800128a:	2b00      	cmp	r3, #0
 800128c:	d0f0      	beq.n	8001270 <HAL_RCC_OscConfig+0x200>
 800128e:	e01b      	b.n	80012c8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <HAL_RCC_OscConfig+0x248>)
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001296:	f7ff fc51 	bl	8000b3c <HAL_GetTick>
 800129a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	e00e      	b.n	80012bc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800129e:	f7ff fc4d 	bl	8000b3c <HAL_GetTick>
 80012a2:	4602      	mov	r2, r0
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	2b02      	cmp	r3, #2
 80012aa:	d907      	bls.n	80012bc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80012ac:	2303      	movs	r3, #3
 80012ae:	e150      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80012b0:	40023800 	.word	0x40023800
 80012b4:	42470000 	.word	0x42470000
 80012b8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80012bc:	4b88      	ldr	r3, [pc, #544]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012c0:	f003 0302 	and.w	r3, r3, #2
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d1ea      	bne.n	800129e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	f003 0304 	and.w	r3, r3, #4
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	f000 8097 	beq.w	8001404 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012d6:	2300      	movs	r3, #0
 80012d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012da:	4b81      	ldr	r3, [pc, #516]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d10f      	bne.n	8001306 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60bb      	str	r3, [r7, #8]
 80012ea:	4b7d      	ldr	r3, [pc, #500]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ee:	4a7c      	ldr	r2, [pc, #496]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012f4:	6413      	str	r3, [r2, #64]	; 0x40
 80012f6:	4b7a      	ldr	r3, [pc, #488]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80012f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012fe:	60bb      	str	r3, [r7, #8]
 8001300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001302:	2301      	movs	r3, #1
 8001304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001306:	4b77      	ldr	r3, [pc, #476]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800130e:	2b00      	cmp	r3, #0
 8001310:	d118      	bne.n	8001344 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001312:	4b74      	ldr	r3, [pc, #464]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	4a73      	ldr	r2, [pc, #460]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 8001318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800131c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800131e:	f7ff fc0d 	bl	8000b3c <HAL_GetTick>
 8001322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001324:	e008      	b.n	8001338 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001326:	f7ff fc09 	bl	8000b3c <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d901      	bls.n	8001338 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001334:	2303      	movs	r3, #3
 8001336:	e10c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001338:	4b6a      	ldr	r3, [pc, #424]	; (80014e4 <HAL_RCC_OscConfig+0x474>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001340:	2b00      	cmp	r3, #0
 8001342:	d0f0      	beq.n	8001326 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	689b      	ldr	r3, [r3, #8]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d106      	bne.n	800135a <HAL_RCC_OscConfig+0x2ea>
 800134c:	4b64      	ldr	r3, [pc, #400]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800134e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001350:	4a63      	ldr	r2, [pc, #396]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001352:	f043 0301 	orr.w	r3, r3, #1
 8001356:	6713      	str	r3, [r2, #112]	; 0x70
 8001358:	e01c      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	2b05      	cmp	r3, #5
 8001360:	d10c      	bne.n	800137c <HAL_RCC_OscConfig+0x30c>
 8001362:	4b5f      	ldr	r3, [pc, #380]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001366:	4a5e      	ldr	r2, [pc, #376]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001368:	f043 0304 	orr.w	r3, r3, #4
 800136c:	6713      	str	r3, [r2, #112]	; 0x70
 800136e:	4b5c      	ldr	r3, [pc, #368]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a5b      	ldr	r2, [pc, #364]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	e00b      	b.n	8001394 <HAL_RCC_OscConfig+0x324>
 800137c:	4b58      	ldr	r3, [pc, #352]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800137e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001380:	4a57      	ldr	r2, [pc, #348]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001382:	f023 0301 	bic.w	r3, r3, #1
 8001386:	6713      	str	r3, [r2, #112]	; 0x70
 8001388:	4b55      	ldr	r3, [pc, #340]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800138c:	4a54      	ldr	r2, [pc, #336]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800138e:	f023 0304 	bic.w	r3, r3, #4
 8001392:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	689b      	ldr	r3, [r3, #8]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d015      	beq.n	80013c8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800139c:	f7ff fbce 	bl	8000b3c <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013a2:	e00a      	b.n	80013ba <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbca 	bl	8000b3c <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80013b2:	4293      	cmp	r3, r2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e0cb      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ba:	4b49      	ldr	r3, [pc, #292]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013be:	f003 0302 	and.w	r3, r3, #2
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d0ee      	beq.n	80013a4 <HAL_RCC_OscConfig+0x334>
 80013c6:	e014      	b.n	80013f2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013c8:	f7ff fbb8 	bl	8000b3c <HAL_GetTick>
 80013cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013ce:	e00a      	b.n	80013e6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013d0:	f7ff fbb4 	bl	8000b3c <HAL_GetTick>
 80013d4:	4602      	mov	r2, r0
 80013d6:	693b      	ldr	r3, [r7, #16]
 80013d8:	1ad3      	subs	r3, r2, r3
 80013da:	f241 3288 	movw	r2, #5000	; 0x1388
 80013de:	4293      	cmp	r3, r2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e0b5      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013e6:	4b3e      	ldr	r3, [pc, #248]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1ee      	bne.n	80013d0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013f2:	7dfb      	ldrb	r3, [r7, #23]
 80013f4:	2b01      	cmp	r3, #1
 80013f6:	d105      	bne.n	8001404 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013f8:	4b39      	ldr	r3, [pc, #228]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fc:	4a38      	ldr	r2, [pc, #224]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80013fe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001402:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	699b      	ldr	r3, [r3, #24]
 8001408:	2b00      	cmp	r3, #0
 800140a:	f000 80a1 	beq.w	8001550 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800140e:	4b34      	ldr	r3, [pc, #208]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	f003 030c 	and.w	r3, r3, #12
 8001416:	2b08      	cmp	r3, #8
 8001418:	d05c      	beq.n	80014d4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	2b02      	cmp	r3, #2
 8001420:	d141      	bne.n	80014a6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001422:	4b31      	ldr	r3, [pc, #196]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 8001424:	2200      	movs	r2, #0
 8001426:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001428:	f7ff fb88 	bl	8000b3c <HAL_GetTick>
 800142c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800142e:	e008      	b.n	8001442 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001430:	f7ff fb84 	bl	8000b3c <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	2b02      	cmp	r3, #2
 800143c:	d901      	bls.n	8001442 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800143e:	2303      	movs	r3, #3
 8001440:	e087      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001442:	4b27      	ldr	r3, [pc, #156]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d1f0      	bne.n	8001430 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69da      	ldr	r2, [r3, #28]
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a1b      	ldr	r3, [r3, #32]
 8001456:	431a      	orrs	r2, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145c:	019b      	lsls	r3, r3, #6
 800145e:	431a      	orrs	r2, r3
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001464:	085b      	lsrs	r3, r3, #1
 8001466:	3b01      	subs	r3, #1
 8001468:	041b      	lsls	r3, r3, #16
 800146a:	431a      	orrs	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001470:	061b      	lsls	r3, r3, #24
 8001472:	491b      	ldr	r1, [pc, #108]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 8001474:	4313      	orrs	r3, r2
 8001476:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001478:	4b1b      	ldr	r3, [pc, #108]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 800147a:	2201      	movs	r2, #1
 800147c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800147e:	f7ff fb5d 	bl	8000b3c <HAL_GetTick>
 8001482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001484:	e008      	b.n	8001498 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001486:	f7ff fb59 	bl	8000b3c <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	693b      	ldr	r3, [r7, #16]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b02      	cmp	r3, #2
 8001492:	d901      	bls.n	8001498 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001494:	2303      	movs	r3, #3
 8001496:	e05c      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001498:	4b11      	ldr	r3, [pc, #68]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d0f0      	beq.n	8001486 <HAL_RCC_OscConfig+0x416>
 80014a4:	e054      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_RCC_OscConfig+0x478>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ac:	f7ff fb46 	bl	8000b3c <HAL_GetTick>
 80014b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014b4:	f7ff fb42 	bl	8000b3c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b02      	cmp	r3, #2
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e045      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014c6:	4b06      	ldr	r3, [pc, #24]	; (80014e0 <HAL_RCC_OscConfig+0x470>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x444>
 80014d2:	e03d      	b.n	8001550 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	2b01      	cmp	r3, #1
 80014da:	d107      	bne.n	80014ec <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e038      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
 80014e0:	40023800 	.word	0x40023800
 80014e4:	40007000 	.word	0x40007000
 80014e8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80014ec:	4b1b      	ldr	r3, [pc, #108]	; (800155c <HAL_RCC_OscConfig+0x4ec>)
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	2b01      	cmp	r3, #1
 80014f8:	d028      	beq.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d121      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001512:	429a      	cmp	r2, r3
 8001514:	d11a      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001516:	68fa      	ldr	r2, [r7, #12]
 8001518:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800151c:	4013      	ands	r3, r2
 800151e:	687a      	ldr	r2, [r7, #4]
 8001520:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001522:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001524:	4293      	cmp	r3, r2
 8001526:	d111      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001532:	085b      	lsrs	r3, r3, #1
 8001534:	3b01      	subs	r3, #1
 8001536:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001538:	429a      	cmp	r2, r3
 800153a:	d107      	bne.n	800154c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001546:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001548:	429a      	cmp	r2, r3
 800154a:	d001      	beq.n	8001550 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e000      	b.n	8001552 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001550:	2300      	movs	r3, #0
}
 8001552:	4618      	mov	r0, r3
 8001554:	3718      	adds	r7, #24
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}
 800155a:	bf00      	nop
 800155c:	40023800 	.word	0x40023800

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0cc      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b68      	ldr	r3, [pc, #416]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d90c      	bls.n	800159c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b65      	ldr	r3, [pc, #404]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b63      	ldr	r3, [pc, #396]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e0b8      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0302 	and.w	r3, r3, #2
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d020      	beq.n	80015ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	f003 0304 	and.w	r3, r3, #4
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d005      	beq.n	80015c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80015b4:	4b59      	ldr	r3, [pc, #356]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	4a58      	ldr	r2, [pc, #352]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80015be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0308 	and.w	r3, r3, #8
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d005      	beq.n	80015d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80015cc:	4b53      	ldr	r3, [pc, #332]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	4a52      	ldr	r2, [pc, #328]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80015d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015d8:	4b50      	ldr	r3, [pc, #320]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	494d      	ldr	r1, [pc, #308]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80015e6:	4313      	orrs	r3, r2
 80015e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 0301 	and.w	r3, r3, #1
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d044      	beq.n	8001680 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d107      	bne.n	800160e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80015fe:	4b47      	ldr	r3, [pc, #284]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001606:	2b00      	cmp	r3, #0
 8001608:	d119      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800160a:	2301      	movs	r3, #1
 800160c:	e07f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	2b02      	cmp	r3, #2
 8001614:	d003      	beq.n	800161e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800161a:	2b03      	cmp	r3, #3
 800161c:	d107      	bne.n	800162e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800161e:	4b3f      	ldr	r3, [pc, #252]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d109      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800162a:	2301      	movs	r3, #1
 800162c:	e06f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800162e:	4b3b      	ldr	r3, [pc, #236]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	f003 0302 	and.w	r3, r3, #2
 8001636:	2b00      	cmp	r3, #0
 8001638:	d101      	bne.n	800163e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e067      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800163e:	4b37      	ldr	r3, [pc, #220]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001640:	689b      	ldr	r3, [r3, #8]
 8001642:	f023 0203 	bic.w	r2, r3, #3
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	685b      	ldr	r3, [r3, #4]
 800164a:	4934      	ldr	r1, [pc, #208]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 800164c:	4313      	orrs	r3, r2
 800164e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001650:	f7ff fa74 	bl	8000b3c <HAL_GetTick>
 8001654:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001656:	e00a      	b.n	800166e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001658:	f7ff fa70 	bl	8000b3c <HAL_GetTick>
 800165c:	4602      	mov	r2, r0
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	1ad3      	subs	r3, r2, r3
 8001662:	f241 3288 	movw	r2, #5000	; 0x1388
 8001666:	4293      	cmp	r3, r2
 8001668:	d901      	bls.n	800166e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e04f      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800166e:	4b2b      	ldr	r3, [pc, #172]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 8001670:	689b      	ldr	r3, [r3, #8]
 8001672:	f003 020c 	and.w	r2, r3, #12
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	009b      	lsls	r3, r3, #2
 800167c:	429a      	cmp	r2, r3
 800167e:	d1eb      	bne.n	8001658 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001680:	4b25      	ldr	r3, [pc, #148]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f003 0307 	and.w	r3, r3, #7
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	429a      	cmp	r2, r3
 800168c:	d20c      	bcs.n	80016a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800168e:	4b22      	ldr	r3, [pc, #136]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001690:	683a      	ldr	r2, [r7, #0]
 8001692:	b2d2      	uxtb	r2, r2
 8001694:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001696:	4b20      	ldr	r3, [pc, #128]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	f003 0307 	and.w	r3, r3, #7
 800169e:	683a      	ldr	r2, [r7, #0]
 80016a0:	429a      	cmp	r2, r3
 80016a2:	d001      	beq.n	80016a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80016a4:	2301      	movs	r3, #1
 80016a6:	e032      	b.n	800170e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f003 0304 	and.w	r3, r3, #4
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d008      	beq.n	80016c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016b4:	4b19      	ldr	r3, [pc, #100]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016b6:	689b      	ldr	r3, [r3, #8]
 80016b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	4916      	ldr	r1, [pc, #88]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016c2:	4313      	orrs	r3, r2
 80016c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d009      	beq.n	80016e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016d2:	4b12      	ldr	r3, [pc, #72]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016d4:	689b      	ldr	r3, [r3, #8]
 80016d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	691b      	ldr	r3, [r3, #16]
 80016de:	00db      	lsls	r3, r3, #3
 80016e0:	490e      	ldr	r1, [pc, #56]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016e2:	4313      	orrs	r3, r2
 80016e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80016e6:	f000 f821 	bl	800172c <HAL_RCC_GetSysClockFreq>
 80016ea:	4602      	mov	r2, r0
 80016ec:	4b0b      	ldr	r3, [pc, #44]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	091b      	lsrs	r3, r3, #4
 80016f2:	f003 030f 	and.w	r3, r3, #15
 80016f6:	490a      	ldr	r1, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	5ccb      	ldrb	r3, [r1, r3]
 80016fa:	fa22 f303 	lsr.w	r3, r2, r3
 80016fe:	4a09      	ldr	r2, [pc, #36]	; (8001724 <HAL_RCC_ClockConfig+0x1c4>)
 8001700:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001702:	4b09      	ldr	r3, [pc, #36]	; (8001728 <HAL_RCC_ClockConfig+0x1c8>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4618      	mov	r0, r3
 8001708:	f7ff f9d4 	bl	8000ab4 <HAL_InitTick>

  return HAL_OK;
 800170c:	2300      	movs	r3, #0
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	40023c00 	.word	0x40023c00
 800171c:	40023800 	.word	0x40023800
 8001720:	08002bcc 	.word	0x08002bcc
 8001724:	20000000 	.word	0x20000000
 8001728:	20000004 	.word	0x20000004

0800172c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800172c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001730:	b094      	sub	sp, #80	; 0x50
 8001732:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001734:	2300      	movs	r3, #0
 8001736:	647b      	str	r3, [r7, #68]	; 0x44
 8001738:	2300      	movs	r3, #0
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173c:	2300      	movs	r3, #0
 800173e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001740:	2300      	movs	r3, #0
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001744:	4b79      	ldr	r3, [pc, #484]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	f003 030c 	and.w	r3, r3, #12
 800174c:	2b08      	cmp	r3, #8
 800174e:	d00d      	beq.n	800176c <HAL_RCC_GetSysClockFreq+0x40>
 8001750:	2b08      	cmp	r3, #8
 8001752:	f200 80e1 	bhi.w	8001918 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <HAL_RCC_GetSysClockFreq+0x34>
 800175a:	2b04      	cmp	r3, #4
 800175c:	d003      	beq.n	8001766 <HAL_RCC_GetSysClockFreq+0x3a>
 800175e:	e0db      	b.n	8001918 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001760:	4b73      	ldr	r3, [pc, #460]	; (8001930 <HAL_RCC_GetSysClockFreq+0x204>)
 8001762:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001764:	e0db      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001766:	4b73      	ldr	r3, [pc, #460]	; (8001934 <HAL_RCC_GetSysClockFreq+0x208>)
 8001768:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800176a:	e0d8      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800176c:	4b6f      	ldr	r3, [pc, #444]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001774:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001776:	4b6d      	ldr	r3, [pc, #436]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001778:	685b      	ldr	r3, [r3, #4]
 800177a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800177e:	2b00      	cmp	r3, #0
 8001780:	d063      	beq.n	800184a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001782:	4b6a      	ldr	r3, [pc, #424]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	099b      	lsrs	r3, r3, #6
 8001788:	2200      	movs	r2, #0
 800178a:	63bb      	str	r3, [r7, #56]	; 0x38
 800178c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800178e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001790:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001794:	633b      	str	r3, [r7, #48]	; 0x30
 8001796:	2300      	movs	r3, #0
 8001798:	637b      	str	r3, [r7, #52]	; 0x34
 800179a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800179e:	4622      	mov	r2, r4
 80017a0:	462b      	mov	r3, r5
 80017a2:	f04f 0000 	mov.w	r0, #0
 80017a6:	f04f 0100 	mov.w	r1, #0
 80017aa:	0159      	lsls	r1, r3, #5
 80017ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80017b0:	0150      	lsls	r0, r2, #5
 80017b2:	4602      	mov	r2, r0
 80017b4:	460b      	mov	r3, r1
 80017b6:	4621      	mov	r1, r4
 80017b8:	1a51      	subs	r1, r2, r1
 80017ba:	6139      	str	r1, [r7, #16]
 80017bc:	4629      	mov	r1, r5
 80017be:	eb63 0301 	sbc.w	r3, r3, r1
 80017c2:	617b      	str	r3, [r7, #20]
 80017c4:	f04f 0200 	mov.w	r2, #0
 80017c8:	f04f 0300 	mov.w	r3, #0
 80017cc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80017d0:	4659      	mov	r1, fp
 80017d2:	018b      	lsls	r3, r1, #6
 80017d4:	4651      	mov	r1, sl
 80017d6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80017da:	4651      	mov	r1, sl
 80017dc:	018a      	lsls	r2, r1, #6
 80017de:	4651      	mov	r1, sl
 80017e0:	ebb2 0801 	subs.w	r8, r2, r1
 80017e4:	4659      	mov	r1, fp
 80017e6:	eb63 0901 	sbc.w	r9, r3, r1
 80017ea:	f04f 0200 	mov.w	r2, #0
 80017ee:	f04f 0300 	mov.w	r3, #0
 80017f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80017f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80017fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80017fe:	4690      	mov	r8, r2
 8001800:	4699      	mov	r9, r3
 8001802:	4623      	mov	r3, r4
 8001804:	eb18 0303 	adds.w	r3, r8, r3
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	462b      	mov	r3, r5
 800180c:	eb49 0303 	adc.w	r3, r9, r3
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	f04f 0200 	mov.w	r2, #0
 8001816:	f04f 0300 	mov.w	r3, #0
 800181a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800181e:	4629      	mov	r1, r5
 8001820:	024b      	lsls	r3, r1, #9
 8001822:	4621      	mov	r1, r4
 8001824:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001828:	4621      	mov	r1, r4
 800182a:	024a      	lsls	r2, r1, #9
 800182c:	4610      	mov	r0, r2
 800182e:	4619      	mov	r1, r3
 8001830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001832:	2200      	movs	r2, #0
 8001834:	62bb      	str	r3, [r7, #40]	; 0x28
 8001836:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001838:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800183c:	f7fe fcca 	bl	80001d4 <__aeabi_uldivmod>
 8001840:	4602      	mov	r2, r0
 8001842:	460b      	mov	r3, r1
 8001844:	4613      	mov	r3, r2
 8001846:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001848:	e058      	b.n	80018fc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800184a:	4b38      	ldr	r3, [pc, #224]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	099b      	lsrs	r3, r3, #6
 8001850:	2200      	movs	r2, #0
 8001852:	4618      	mov	r0, r3
 8001854:	4611      	mov	r1, r2
 8001856:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800185a:	623b      	str	r3, [r7, #32]
 800185c:	2300      	movs	r3, #0
 800185e:	627b      	str	r3, [r7, #36]	; 0x24
 8001860:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001864:	4642      	mov	r2, r8
 8001866:	464b      	mov	r3, r9
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	f04f 0100 	mov.w	r1, #0
 8001870:	0159      	lsls	r1, r3, #5
 8001872:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001876:	0150      	lsls	r0, r2, #5
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	4641      	mov	r1, r8
 800187e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001882:	4649      	mov	r1, r9
 8001884:	eb63 0b01 	sbc.w	fp, r3, r1
 8001888:	f04f 0200 	mov.w	r2, #0
 800188c:	f04f 0300 	mov.w	r3, #0
 8001890:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001894:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001898:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800189c:	ebb2 040a 	subs.w	r4, r2, sl
 80018a0:	eb63 050b 	sbc.w	r5, r3, fp
 80018a4:	f04f 0200 	mov.w	r2, #0
 80018a8:	f04f 0300 	mov.w	r3, #0
 80018ac:	00eb      	lsls	r3, r5, #3
 80018ae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80018b2:	00e2      	lsls	r2, r4, #3
 80018b4:	4614      	mov	r4, r2
 80018b6:	461d      	mov	r5, r3
 80018b8:	4643      	mov	r3, r8
 80018ba:	18e3      	adds	r3, r4, r3
 80018bc:	603b      	str	r3, [r7, #0]
 80018be:	464b      	mov	r3, r9
 80018c0:	eb45 0303 	adc.w	r3, r5, r3
 80018c4:	607b      	str	r3, [r7, #4]
 80018c6:	f04f 0200 	mov.w	r2, #0
 80018ca:	f04f 0300 	mov.w	r3, #0
 80018ce:	e9d7 4500 	ldrd	r4, r5, [r7]
 80018d2:	4629      	mov	r1, r5
 80018d4:	028b      	lsls	r3, r1, #10
 80018d6:	4621      	mov	r1, r4
 80018d8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80018dc:	4621      	mov	r1, r4
 80018de:	028a      	lsls	r2, r1, #10
 80018e0:	4610      	mov	r0, r2
 80018e2:	4619      	mov	r1, r3
 80018e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80018e6:	2200      	movs	r2, #0
 80018e8:	61bb      	str	r3, [r7, #24]
 80018ea:	61fa      	str	r2, [r7, #28]
 80018ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80018f0:	f7fe fc70 	bl	80001d4 <__aeabi_uldivmod>
 80018f4:	4602      	mov	r2, r0
 80018f6:	460b      	mov	r3, r1
 80018f8:	4613      	mov	r3, r2
 80018fa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80018fc:	4b0b      	ldr	r3, [pc, #44]	; (800192c <HAL_RCC_GetSysClockFreq+0x200>)
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	0c1b      	lsrs	r3, r3, #16
 8001902:	f003 0303 	and.w	r3, r3, #3
 8001906:	3301      	adds	r3, #1
 8001908:	005b      	lsls	r3, r3, #1
 800190a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800190c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800190e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001910:	fbb2 f3f3 	udiv	r3, r2, r3
 8001914:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001916:	e002      	b.n	800191e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001918:	4b05      	ldr	r3, [pc, #20]	; (8001930 <HAL_RCC_GetSysClockFreq+0x204>)
 800191a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800191c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800191e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001920:	4618      	mov	r0, r3
 8001922:	3750      	adds	r7, #80	; 0x50
 8001924:	46bd      	mov	sp, r7
 8001926:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	00f42400 	.word	0x00f42400
 8001934:	007a1200 	.word	0x007a1200

08001938 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001938:	b480      	push	{r7}
 800193a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800193c:	4b03      	ldr	r3, [pc, #12]	; (800194c <HAL_RCC_GetHCLKFreq+0x14>)
 800193e:	681b      	ldr	r3, [r3, #0]
}
 8001940:	4618      	mov	r0, r3
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	20000000 	.word	0x20000000

08001950 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001954:	f7ff fff0 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001958:	4602      	mov	r2, r0
 800195a:	4b05      	ldr	r3, [pc, #20]	; (8001970 <HAL_RCC_GetPCLK1Freq+0x20>)
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	0a9b      	lsrs	r3, r3, #10
 8001960:	f003 0307 	and.w	r3, r3, #7
 8001964:	4903      	ldr	r1, [pc, #12]	; (8001974 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001966:	5ccb      	ldrb	r3, [r1, r3]
 8001968:	fa22 f303 	lsr.w	r3, r2, r3
}
 800196c:	4618      	mov	r0, r3
 800196e:	bd80      	pop	{r7, pc}
 8001970:	40023800 	.word	0x40023800
 8001974:	08002bdc 	.word	0x08002bdc

08001978 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800197c:	f7ff ffdc 	bl	8001938 <HAL_RCC_GetHCLKFreq>
 8001980:	4602      	mov	r2, r0
 8001982:	4b05      	ldr	r3, [pc, #20]	; (8001998 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001984:	689b      	ldr	r3, [r3, #8]
 8001986:	0b5b      	lsrs	r3, r3, #13
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	4903      	ldr	r1, [pc, #12]	; (800199c <HAL_RCC_GetPCLK2Freq+0x24>)
 800198e:	5ccb      	ldrb	r3, [r1, r3]
 8001990:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001994:	4618      	mov	r0, r3
 8001996:	bd80      	pop	{r7, pc}
 8001998:	40023800 	.word	0x40023800
 800199c:	08002bdc 	.word	0x08002bdc

080019a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d101      	bne.n	80019b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019ae:	2301      	movs	r3, #1
 80019b0:	e041      	b.n	8001a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d106      	bne.n	80019cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2200      	movs	r2, #0
 80019c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	f7fe ff4c 	bl	8000864 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2202      	movs	r2, #2
 80019d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681a      	ldr	r2, [r3, #0]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	3304      	adds	r3, #4
 80019dc:	4619      	mov	r1, r3
 80019de:	4610      	mov	r0, r2
 80019e0:	f000 fac0 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2201      	movs	r2, #1
 80019e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	2201      	movs	r2, #1
 80019f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	2201      	movs	r2, #1
 80019f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2201      	movs	r2, #1
 8001a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	2201      	movs	r2, #1
 8001a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2201      	movs	r2, #1
 8001a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	2201      	movs	r2, #1
 8001a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001a34:	2300      	movs	r3, #0
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3708      	adds	r7, #8
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b082      	sub	sp, #8
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d101      	bne.n	8001a50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e041      	b.n	8001ad4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d106      	bne.n	8001a6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001a64:	6878      	ldr	r0, [r7, #4]
 8001a66:	f000 f839 	bl	8001adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	2202      	movs	r2, #2
 8001a6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	3304      	adds	r3, #4
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4610      	mov	r0, r2
 8001a7e:	f000 fa71 	bl	8001f64 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2201      	movs	r2, #1
 8001a86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	2201      	movs	r2, #1
 8001a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2201      	movs	r2, #1
 8001a9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	2201      	movs	r2, #1
 8001aa6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2201      	movs	r2, #1
 8001ab6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2201      	movs	r2, #1
 8001abe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	2201      	movs	r2, #1
 8001ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3708      	adds	r7, #8
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b083      	sub	sp, #12
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ae4:	bf00      	nop
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr

08001af0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b084      	sub	sp, #16
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
 8001af8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d109      	bne.n	8001b14 <HAL_TIM_PWM_Start+0x24>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	bf14      	ite	ne
 8001b0c:	2301      	movne	r3, #1
 8001b0e:	2300      	moveq	r3, #0
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	e022      	b.n	8001b5a <HAL_TIM_PWM_Start+0x6a>
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	2b04      	cmp	r3, #4
 8001b18:	d109      	bne.n	8001b2e <HAL_TIM_PWM_Start+0x3e>
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8001b20:	b2db      	uxtb	r3, r3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	bf14      	ite	ne
 8001b26:	2301      	movne	r3, #1
 8001b28:	2300      	moveq	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	e015      	b.n	8001b5a <HAL_TIM_PWM_Start+0x6a>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	2b08      	cmp	r3, #8
 8001b32:	d109      	bne.n	8001b48 <HAL_TIM_PWM_Start+0x58>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001b3a:	b2db      	uxtb	r3, r3
 8001b3c:	2b01      	cmp	r3, #1
 8001b3e:	bf14      	ite	ne
 8001b40:	2301      	movne	r3, #1
 8001b42:	2300      	moveq	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	e008      	b.n	8001b5a <HAL_TIM_PWM_Start+0x6a>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b01      	cmp	r3, #1
 8001b52:	bf14      	ite	ne
 8001b54:	2301      	movne	r3, #1
 8001b56:	2300      	moveq	r3, #0
 8001b58:	b2db      	uxtb	r3, r3
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d001      	beq.n	8001b62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e068      	b.n	8001c34 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d104      	bne.n	8001b72 <HAL_TIM_PWM_Start+0x82>
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2202      	movs	r2, #2
 8001b6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001b70:	e013      	b.n	8001b9a <HAL_TIM_PWM_Start+0xaa>
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	2b04      	cmp	r3, #4
 8001b76:	d104      	bne.n	8001b82 <HAL_TIM_PWM_Start+0x92>
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2202      	movs	r2, #2
 8001b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001b80:	e00b      	b.n	8001b9a <HAL_TIM_PWM_Start+0xaa>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b08      	cmp	r3, #8
 8001b86:	d104      	bne.n	8001b92 <HAL_TIM_PWM_Start+0xa2>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2202      	movs	r2, #2
 8001b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001b90:	e003      	b.n	8001b9a <HAL_TIM_PWM_Start+0xaa>
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	2202      	movs	r2, #2
 8001b96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	2201      	movs	r2, #1
 8001ba0:	6839      	ldr	r1, [r7, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fc84 	bl	80024b0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	4a23      	ldr	r2, [pc, #140]	; (8001c3c <HAL_TIM_PWM_Start+0x14c>)
 8001bae:	4293      	cmp	r3, r2
 8001bb0:	d107      	bne.n	8001bc2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a1d      	ldr	r2, [pc, #116]	; (8001c3c <HAL_TIM_PWM_Start+0x14c>)
 8001bc8:	4293      	cmp	r3, r2
 8001bca:	d018      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x10e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bd4:	d013      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x10e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a19      	ldr	r2, [pc, #100]	; (8001c40 <HAL_TIM_PWM_Start+0x150>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d00e      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x10e>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	4a17      	ldr	r2, [pc, #92]	; (8001c44 <HAL_TIM_PWM_Start+0x154>)
 8001be6:	4293      	cmp	r3, r2
 8001be8:	d009      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x10e>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a16      	ldr	r2, [pc, #88]	; (8001c48 <HAL_TIM_PWM_Start+0x158>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	d004      	beq.n	8001bfe <HAL_TIM_PWM_Start+0x10e>
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a14      	ldr	r2, [pc, #80]	; (8001c4c <HAL_TIM_PWM_Start+0x15c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d111      	bne.n	8001c22 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 0307 	and.w	r3, r3, #7
 8001c08:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2b06      	cmp	r3, #6
 8001c0e:	d010      	beq.n	8001c32 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f042 0201 	orr.w	r2, r2, #1
 8001c1e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c20:	e007      	b.n	8001c32 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	681a      	ldr	r2, [r3, #0]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f042 0201 	orr.w	r2, r2, #1
 8001c30:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3710      	adds	r7, #16
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40010000 	.word	0x40010000
 8001c40:	40000400 	.word	0x40000400
 8001c44:	40000800 	.word	0x40000800
 8001c48:	40000c00 	.word	0x40000c00
 8001c4c:	40014000 	.word	0x40014000

08001c50 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b086      	sub	sp, #24
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d101      	bne.n	8001c6e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	e0ae      	b.n	8001dcc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	2201      	movs	r2, #1
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b0c      	cmp	r3, #12
 8001c7a:	f200 809f 	bhi.w	8001dbc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001c7e:	a201      	add	r2, pc, #4	; (adr r2, 8001c84 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c84:	08001cb9 	.word	0x08001cb9
 8001c88:	08001dbd 	.word	0x08001dbd
 8001c8c:	08001dbd 	.word	0x08001dbd
 8001c90:	08001dbd 	.word	0x08001dbd
 8001c94:	08001cf9 	.word	0x08001cf9
 8001c98:	08001dbd 	.word	0x08001dbd
 8001c9c:	08001dbd 	.word	0x08001dbd
 8001ca0:	08001dbd 	.word	0x08001dbd
 8001ca4:	08001d3b 	.word	0x08001d3b
 8001ca8:	08001dbd 	.word	0x08001dbd
 8001cac:	08001dbd 	.word	0x08001dbd
 8001cb0:	08001dbd 	.word	0x08001dbd
 8001cb4:	08001d7b 	.word	0x08001d7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	68b9      	ldr	r1, [r7, #8]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f000 f9d0 	bl	8002064 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	699a      	ldr	r2, [r3, #24]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0208 	orr.w	r2, r2, #8
 8001cd2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	699a      	ldr	r2, [r3, #24]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0204 	bic.w	r2, r2, #4
 8001ce2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6999      	ldr	r1, [r3, #24]
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	691a      	ldr	r2, [r3, #16]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	619a      	str	r2, [r3, #24]
      break;
 8001cf6:	e064      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	68b9      	ldr	r1, [r7, #8]
 8001cfe:	4618      	mov	r0, r3
 8001d00:	f000 fa16 	bl	8002130 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	699a      	ldr	r2, [r3, #24]
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	699a      	ldr	r2, [r3, #24]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001d22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	6999      	ldr	r1, [r3, #24]
 8001d2a:	68bb      	ldr	r3, [r7, #8]
 8001d2c:	691b      	ldr	r3, [r3, #16]
 8001d2e:	021a      	lsls	r2, r3, #8
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	430a      	orrs	r2, r1
 8001d36:	619a      	str	r2, [r3, #24]
      break;
 8001d38:	e043      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	68b9      	ldr	r1, [r7, #8]
 8001d40:	4618      	mov	r0, r3
 8001d42:	f000 fa61 	bl	8002208 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	69da      	ldr	r2, [r3, #28]
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f042 0208 	orr.w	r2, r2, #8
 8001d54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	69da      	ldr	r2, [r3, #28]
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f022 0204 	bic.w	r2, r2, #4
 8001d64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	69d9      	ldr	r1, [r3, #28]
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	691a      	ldr	r2, [r3, #16]
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	430a      	orrs	r2, r1
 8001d76:	61da      	str	r2, [r3, #28]
      break;
 8001d78:	e023      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68b9      	ldr	r1, [r7, #8]
 8001d80:	4618      	mov	r0, r3
 8001d82:	f000 faab 	bl	80022dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	69da      	ldr	r2, [r3, #28]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001d94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	69da      	ldr	r2, [r3, #28]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001da4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	69d9      	ldr	r1, [r3, #28]
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	691b      	ldr	r3, [r3, #16]
 8001db0:	021a      	lsls	r2, r3, #8
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	430a      	orrs	r2, r1
 8001db8:	61da      	str	r2, [r3, #28]
      break;
 8001dba:	e002      	b.n	8001dc2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	75fb      	strb	r3, [r7, #23]
      break;
 8001dc0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001dca:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dcc:	4618      	mov	r0, r3
 8001dce:	3718      	adds	r7, #24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd80      	pop	{r7, pc}

08001dd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001de8:	2b01      	cmp	r3, #1
 8001dea:	d101      	bne.n	8001df0 <HAL_TIM_ConfigClockSource+0x1c>
 8001dec:	2302      	movs	r3, #2
 8001dee:	e0b4      	b.n	8001f5a <HAL_TIM_ConfigClockSource+0x186>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	2201      	movs	r2, #1
 8001df4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	2202      	movs	r2, #2
 8001dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	689b      	ldr	r3, [r3, #8]
 8001e06:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8001e0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001e16:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	68ba      	ldr	r2, [r7, #8]
 8001e1e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e28:	d03e      	beq.n	8001ea8 <HAL_TIM_ConfigClockSource+0xd4>
 8001e2a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e2e:	f200 8087 	bhi.w	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e36:	f000 8086 	beq.w	8001f46 <HAL_TIM_ConfigClockSource+0x172>
 8001e3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e3e:	d87f      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e40:	2b70      	cmp	r3, #112	; 0x70
 8001e42:	d01a      	beq.n	8001e7a <HAL_TIM_ConfigClockSource+0xa6>
 8001e44:	2b70      	cmp	r3, #112	; 0x70
 8001e46:	d87b      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e48:	2b60      	cmp	r3, #96	; 0x60
 8001e4a:	d050      	beq.n	8001eee <HAL_TIM_ConfigClockSource+0x11a>
 8001e4c:	2b60      	cmp	r3, #96	; 0x60
 8001e4e:	d877      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e50:	2b50      	cmp	r3, #80	; 0x50
 8001e52:	d03c      	beq.n	8001ece <HAL_TIM_ConfigClockSource+0xfa>
 8001e54:	2b50      	cmp	r3, #80	; 0x50
 8001e56:	d873      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e58:	2b40      	cmp	r3, #64	; 0x40
 8001e5a:	d058      	beq.n	8001f0e <HAL_TIM_ConfigClockSource+0x13a>
 8001e5c:	2b40      	cmp	r3, #64	; 0x40
 8001e5e:	d86f      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e60:	2b30      	cmp	r3, #48	; 0x30
 8001e62:	d064      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e64:	2b30      	cmp	r3, #48	; 0x30
 8001e66:	d86b      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e68:	2b20      	cmp	r3, #32
 8001e6a:	d060      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e6c:	2b20      	cmp	r3, #32
 8001e6e:	d867      	bhi.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d05c      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e74:	2b10      	cmp	r3, #16
 8001e76:	d05a      	beq.n	8001f2e <HAL_TIM_ConfigClockSource+0x15a>
 8001e78:	e062      	b.n	8001f40 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6818      	ldr	r0, [r3, #0]
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	6899      	ldr	r1, [r3, #8]
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685a      	ldr	r2, [r3, #4]
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	68db      	ldr	r3, [r3, #12]
 8001e8a:	f000 faf1 	bl	8002470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001e9c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	68ba      	ldr	r2, [r7, #8]
 8001ea4:	609a      	str	r2, [r3, #8]
      break;
 8001ea6:	e04f      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6818      	ldr	r0, [r3, #0]
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	6899      	ldr	r1, [r3, #8]
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685a      	ldr	r2, [r3, #4]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f000 fada 	bl	8002470 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	689a      	ldr	r2, [r3, #8]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001eca:	609a      	str	r2, [r3, #8]
      break;
 8001ecc:	e03c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6818      	ldr	r0, [r3, #0]
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	6859      	ldr	r1, [r3, #4]
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	461a      	mov	r2, r3
 8001edc:	f000 fa4e 	bl	800237c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	2150      	movs	r1, #80	; 0x50
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	f000 faa7 	bl	800243a <TIM_ITRx_SetConfig>
      break;
 8001eec:	e02c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6818      	ldr	r0, [r3, #0]
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	6859      	ldr	r1, [r3, #4]
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	68db      	ldr	r3, [r3, #12]
 8001efa:	461a      	mov	r2, r3
 8001efc:	f000 fa6d 	bl	80023da <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	2160      	movs	r1, #96	; 0x60
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 fa97 	bl	800243a <TIM_ITRx_SetConfig>
      break;
 8001f0c:	e01c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6818      	ldr	r0, [r3, #0]
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	6859      	ldr	r1, [r3, #4]
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	461a      	mov	r2, r3
 8001f1c:	f000 fa2e 	bl	800237c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	2140      	movs	r1, #64	; 0x40
 8001f26:	4618      	mov	r0, r3
 8001f28:	f000 fa87 	bl	800243a <TIM_ITRx_SetConfig>
      break;
 8001f2c:	e00c      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4619      	mov	r1, r3
 8001f38:	4610      	mov	r0, r2
 8001f3a:	f000 fa7e 	bl	800243a <TIM_ITRx_SetConfig>
      break;
 8001f3e:	e003      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	73fb      	strb	r3, [r7, #15]
      break;
 8001f44:	e000      	b.n	8001f48 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001f46:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8001f58:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
	...

08001f64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b085      	sub	sp, #20
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
 8001f6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	4a34      	ldr	r2, [pc, #208]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d00f      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f82:	d00b      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	4a31      	ldr	r2, [pc, #196]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001f88:	4293      	cmp	r3, r2
 8001f8a:	d007      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	4a30      	ldr	r2, [pc, #192]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d003      	beq.n	8001f9c <TIM_Base_SetConfig+0x38>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	4a2f      	ldr	r2, [pc, #188]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d108      	bne.n	8001fae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001fa2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	68fa      	ldr	r2, [r7, #12]
 8001faa:	4313      	orrs	r3, r2
 8001fac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4a25      	ldr	r2, [pc, #148]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d01b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001fbc:	d017      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4a22      	ldr	r2, [pc, #136]	; (800204c <TIM_Base_SetConfig+0xe8>)
 8001fc2:	4293      	cmp	r3, r2
 8001fc4:	d013      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	4a21      	ldr	r2, [pc, #132]	; (8002050 <TIM_Base_SetConfig+0xec>)
 8001fca:	4293      	cmp	r3, r2
 8001fcc:	d00f      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a20      	ldr	r2, [pc, #128]	; (8002054 <TIM_Base_SetConfig+0xf0>)
 8001fd2:	4293      	cmp	r3, r2
 8001fd4:	d00b      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	4a1f      	ldr	r2, [pc, #124]	; (8002058 <TIM_Base_SetConfig+0xf4>)
 8001fda:	4293      	cmp	r3, r2
 8001fdc:	d007      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4a1e      	ldr	r2, [pc, #120]	; (800205c <TIM_Base_SetConfig+0xf8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d003      	beq.n	8001fee <TIM_Base_SetConfig+0x8a>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	4a1d      	ldr	r2, [pc, #116]	; (8002060 <TIM_Base_SetConfig+0xfc>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d108      	bne.n	8002000 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	68fa      	ldr	r2, [r7, #12]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	695b      	ldr	r3, [r3, #20]
 800200a:	4313      	orrs	r3, r2
 800200c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	68fa      	ldr	r2, [r7, #12]
 8002012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	689a      	ldr	r2, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	681a      	ldr	r2, [r3, #0]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	4a08      	ldr	r2, [pc, #32]	; (8002048 <TIM_Base_SetConfig+0xe4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d103      	bne.n	8002034 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	691a      	ldr	r2, [r3, #16]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2201      	movs	r2, #1
 8002038:	615a      	str	r2, [r3, #20]
}
 800203a:	bf00      	nop
 800203c:	3714      	adds	r7, #20
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
 8002046:	bf00      	nop
 8002048:	40010000 	.word	0x40010000
 800204c:	40000400 	.word	0x40000400
 8002050:	40000800 	.word	0x40000800
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40014000 	.word	0x40014000
 800205c:	40014400 	.word	0x40014400
 8002060:	40014800 	.word	0x40014800

08002064 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002064:	b480      	push	{r7}
 8002066:	b087      	sub	sp, #28
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
 800206c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a1b      	ldr	r3, [r3, #32]
 8002072:	f023 0201 	bic.w	r2, r3, #1
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6a1b      	ldr	r3, [r3, #32]
 800207e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	699b      	ldr	r3, [r3, #24]
 800208a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f023 0303 	bic.w	r3, r3, #3
 800209a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	4313      	orrs	r3, r2
 80020a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80020a6:	697b      	ldr	r3, [r7, #20]
 80020a8:	f023 0302 	bic.w	r3, r3, #2
 80020ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80020ae:	683b      	ldr	r3, [r7, #0]
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	4313      	orrs	r3, r2
 80020b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	4a1c      	ldr	r2, [pc, #112]	; (800212c <TIM_OC1_SetConfig+0xc8>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d10c      	bne.n	80020da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0308 	bic.w	r3, r3, #8
 80020c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	68db      	ldr	r3, [r3, #12]
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f023 0304 	bic.w	r3, r3, #4
 80020d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4a13      	ldr	r2, [pc, #76]	; (800212c <TIM_OC1_SetConfig+0xc8>)
 80020de:	4293      	cmp	r3, r2
 80020e0:	d111      	bne.n	8002106 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80020e2:	693b      	ldr	r3, [r7, #16]
 80020e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80020e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80020f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	4313      	orrs	r3, r2
 80020fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	693a      	ldr	r2, [r7, #16]
 8002102:	4313      	orrs	r3, r2
 8002104:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	693a      	ldr	r2, [r7, #16]
 800210a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	68fa      	ldr	r2, [r7, #12]
 8002110:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	685a      	ldr	r2, [r3, #4]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	697a      	ldr	r2, [r7, #20]
 800211e:	621a      	str	r2, [r3, #32]
}
 8002120:	bf00      	nop
 8002122:	371c      	adds	r7, #28
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr
 800212c:	40010000 	.word	0x40010000

08002130 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002130:	b480      	push	{r7}
 8002132:	b087      	sub	sp, #28
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
 8002138:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6a1b      	ldr	r3, [r3, #32]
 800213e:	f023 0210 	bic.w	r2, r3, #16
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	6a1b      	ldr	r3, [r3, #32]
 800214a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	685b      	ldr	r3, [r3, #4]
 8002150:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	699b      	ldr	r3, [r3, #24]
 8002156:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800215e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002166:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	021b      	lsls	r3, r3, #8
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	4313      	orrs	r3, r2
 8002172:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	f023 0320 	bic.w	r3, r3, #32
 800217a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800217c:	683b      	ldr	r3, [r7, #0]
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	011b      	lsls	r3, r3, #4
 8002182:	697a      	ldr	r2, [r7, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <TIM_OC2_SetConfig+0xd4>)
 800218c:	4293      	cmp	r3, r2
 800218e:	d10d      	bne.n	80021ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002196:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	68db      	ldr	r3, [r3, #12]
 800219c:	011b      	lsls	r3, r3, #4
 800219e:	697a      	ldr	r2, [r7, #20]
 80021a0:	4313      	orrs	r3, r2
 80021a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80021a4:	697b      	ldr	r3, [r7, #20]
 80021a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80021aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	4a15      	ldr	r2, [pc, #84]	; (8002204 <TIM_OC2_SetConfig+0xd4>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d113      	bne.n	80021dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80021b4:	693b      	ldr	r3, [r7, #16]
 80021b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80021ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80021bc:	693b      	ldr	r3, [r7, #16]
 80021be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80021c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	695b      	ldr	r3, [r3, #20]
 80021c8:	009b      	lsls	r3, r3, #2
 80021ca:	693a      	ldr	r2, [r7, #16]
 80021cc:	4313      	orrs	r3, r2
 80021ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	699b      	ldr	r3, [r3, #24]
 80021d4:	009b      	lsls	r3, r3, #2
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	4313      	orrs	r3, r2
 80021da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	693a      	ldr	r2, [r7, #16]
 80021e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	68fa      	ldr	r2, [r7, #12]
 80021e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80021e8:	683b      	ldr	r3, [r7, #0]
 80021ea:	685a      	ldr	r2, [r3, #4]
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	697a      	ldr	r2, [r7, #20]
 80021f4:	621a      	str	r2, [r3, #32]
}
 80021f6:	bf00      	nop
 80021f8:	371c      	adds	r7, #28
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40010000 	.word	0x40010000

08002208 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002208:	b480      	push	{r7}
 800220a:	b087      	sub	sp, #28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 0303 	bic.w	r3, r3, #3
 800223e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	68fa      	ldr	r2, [r7, #12]
 8002246:	4313      	orrs	r3, r2
 8002248:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800224a:	697b      	ldr	r3, [r7, #20]
 800224c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002250:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	689b      	ldr	r3, [r3, #8]
 8002256:	021b      	lsls	r3, r3, #8
 8002258:	697a      	ldr	r2, [r7, #20]
 800225a:	4313      	orrs	r3, r2
 800225c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	4a1d      	ldr	r2, [pc, #116]	; (80022d8 <TIM_OC3_SetConfig+0xd0>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d10d      	bne.n	8002282 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002266:	697b      	ldr	r3, [r7, #20]
 8002268:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800226c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	021b      	lsls	r3, r3, #8
 8002274:	697a      	ldr	r2, [r7, #20]
 8002276:	4313      	orrs	r3, r2
 8002278:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800227a:	697b      	ldr	r3, [r7, #20]
 800227c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002280:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4a14      	ldr	r2, [pc, #80]	; (80022d8 <TIM_OC3_SetConfig+0xd0>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d113      	bne.n	80022b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800228a:	693b      	ldr	r3, [r7, #16]
 800228c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002290:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002298:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	695b      	ldr	r3, [r3, #20]
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	693a      	ldr	r2, [r7, #16]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	699b      	ldr	r3, [r3, #24]
 80022aa:	011b      	lsls	r3, r3, #4
 80022ac:	693a      	ldr	r2, [r7, #16]
 80022ae:	4313      	orrs	r3, r2
 80022b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	693a      	ldr	r2, [r7, #16]
 80022b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	68fa      	ldr	r2, [r7, #12]
 80022bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	685a      	ldr	r2, [r3, #4]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	621a      	str	r2, [r3, #32]
}
 80022cc:	bf00      	nop
 80022ce:	371c      	adds	r7, #28
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr
 80022d8:	40010000 	.word	0x40010000

080022dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80022dc:	b480      	push	{r7}
 80022de:	b087      	sub	sp, #28
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
 80022e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	69db      	ldr	r3, [r3, #28]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800230a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002312:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	021b      	lsls	r3, r3, #8
 800231a:	68fa      	ldr	r2, [r7, #12]
 800231c:	4313      	orrs	r3, r2
 800231e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002326:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	031b      	lsls	r3, r3, #12
 800232e:	693a      	ldr	r2, [r7, #16]
 8002330:	4313      	orrs	r3, r2
 8002332:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	4a10      	ldr	r2, [pc, #64]	; (8002378 <TIM_OC4_SetConfig+0x9c>)
 8002338:	4293      	cmp	r3, r2
 800233a:	d109      	bne.n	8002350 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800233c:	697b      	ldr	r3, [r7, #20]
 800233e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002342:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	695b      	ldr	r3, [r3, #20]
 8002348:	019b      	lsls	r3, r3, #6
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	697a      	ldr	r2, [r7, #20]
 8002354:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	621a      	str	r2, [r3, #32]
}
 800236a:	bf00      	nop
 800236c:	371c      	adds	r7, #28
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40010000 	.word	0x40010000

0800237c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800237c:	b480      	push	{r7}
 800237e:	b087      	sub	sp, #28
 8002380:	af00      	add	r7, sp, #0
 8002382:	60f8      	str	r0, [r7, #12]
 8002384:	60b9      	str	r1, [r7, #8]
 8002386:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	6a1b      	ldr	r3, [r3, #32]
 800238c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	f023 0201 	bic.w	r2, r3, #1
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	699b      	ldr	r3, [r3, #24]
 800239e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80023a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	693a      	ldr	r2, [r7, #16]
 80023ae:	4313      	orrs	r3, r2
 80023b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80023b2:	697b      	ldr	r3, [r7, #20]
 80023b4:	f023 030a 	bic.w	r3, r3, #10
 80023b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80023ba:	697a      	ldr	r2, [r7, #20]
 80023bc:	68bb      	ldr	r3, [r7, #8]
 80023be:	4313      	orrs	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	693a      	ldr	r2, [r7, #16]
 80023c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	621a      	str	r2, [r3, #32]
}
 80023ce:	bf00      	nop
 80023d0:	371c      	adds	r7, #28
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80023da:	b480      	push	{r7}
 80023dc:	b087      	sub	sp, #28
 80023de:	af00      	add	r7, sp, #0
 80023e0:	60f8      	str	r0, [r7, #12]
 80023e2:	60b9      	str	r1, [r7, #8]
 80023e4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	6a1b      	ldr	r3, [r3, #32]
 80023ea:	f023 0210 	bic.w	r2, r3, #16
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6a1b      	ldr	r3, [r3, #32]
 80023fc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002404:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	031b      	lsls	r3, r3, #12
 800240a:	697a      	ldr	r2, [r7, #20]
 800240c:	4313      	orrs	r3, r2
 800240e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002416:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	011b      	lsls	r3, r3, #4
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	697a      	ldr	r2, [r7, #20]
 8002426:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	693a      	ldr	r2, [r7, #16]
 800242c:	621a      	str	r2, [r3, #32]
}
 800242e:	bf00      	nop
 8002430:	371c      	adds	r7, #28
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr

0800243a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800243a:	b480      	push	{r7}
 800243c:	b085      	sub	sp, #20
 800243e:	af00      	add	r7, sp, #0
 8002440:	6078      	str	r0, [r7, #4]
 8002442:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002450:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	f043 0307 	orr.w	r3, r3, #7
 800245c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	68fa      	ldr	r2, [r7, #12]
 8002462:	609a      	str	r2, [r3, #8]
}
 8002464:	bf00      	nop
 8002466:	3714      	adds	r7, #20
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr

08002470 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002470:	b480      	push	{r7}
 8002472:	b087      	sub	sp, #28
 8002474:	af00      	add	r7, sp, #0
 8002476:	60f8      	str	r0, [r7, #12]
 8002478:	60b9      	str	r1, [r7, #8]
 800247a:	607a      	str	r2, [r7, #4]
 800247c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800248a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	021a      	lsls	r2, r3, #8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	431a      	orrs	r2, r3
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	4313      	orrs	r3, r2
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4313      	orrs	r3, r2
 800249c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	609a      	str	r2, [r3, #8]
}
 80024a4:	bf00      	nop
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr

080024b0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80024b0:	b480      	push	{r7}
 80024b2:	b087      	sub	sp, #28
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	60f8      	str	r0, [r7, #12]
 80024b8:	60b9      	str	r1, [r7, #8]
 80024ba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	f003 031f 	and.w	r3, r3, #31
 80024c2:	2201      	movs	r2, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	6a1a      	ldr	r2, [r3, #32]
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	43db      	mvns	r3, r3
 80024d2:	401a      	ands	r2, r3
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	6a1a      	ldr	r2, [r3, #32]
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	431a      	orrs	r2, r3
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	621a      	str	r2, [r3, #32]
}
 80024ee:	bf00      	nop
 80024f0:	371c      	adds	r7, #28
 80024f2:	46bd      	mov	sp, r7
 80024f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f8:	4770      	bx	lr
	...

080024fc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80024fc:	b480      	push	{r7}
 80024fe:	b085      	sub	sp, #20
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
 8002504:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800250c:	2b01      	cmp	r3, #1
 800250e:	d101      	bne.n	8002514 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002510:	2302      	movs	r3, #2
 8002512:	e050      	b.n	80025b6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2202      	movs	r2, #2
 8002520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800253a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	68fa      	ldr	r2, [r7, #12]
 8002542:	4313      	orrs	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	68fa      	ldr	r2, [r7, #12]
 800254c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a1c      	ldr	r2, [pc, #112]	; (80025c4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d018      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002560:	d013      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	4a18      	ldr	r2, [pc, #96]	; (80025c8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8002568:	4293      	cmp	r3, r2
 800256a:	d00e      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a16      	ldr	r2, [pc, #88]	; (80025cc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d009      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4a15      	ldr	r2, [pc, #84]	; (80025d0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800257c:	4293      	cmp	r3, r2
 800257e:	d004      	beq.n	800258a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a13      	ldr	r2, [pc, #76]	; (80025d4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10c      	bne.n	80025a4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002590:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	68ba      	ldr	r2, [r7, #8]
 8002598:	4313      	orrs	r3, r2
 800259a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	68ba      	ldr	r2, [r7, #8]
 80025a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2200      	movs	r2, #0
 80025b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3714      	adds	r7, #20
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40010000 	.word	0x40010000
 80025c8:	40000400 	.word	0x40000400
 80025cc:	40000800 	.word	0x40000800
 80025d0:	40000c00 	.word	0x40000c00
 80025d4:	40014000 	.word	0x40014000

080025d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e03f      	b.n	800266a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe f988 	bl	8000914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2224      	movs	r2, #36	; 0x24
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	68da      	ldr	r2, [r3, #12]
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800261a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f000 f829 	bl	8002674 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	691a      	ldr	r2, [r3, #16]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002630:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	695a      	ldr	r2, [r3, #20]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002640:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68da      	ldr	r2, [r3, #12]
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002650:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2220      	movs	r2, #32
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2220      	movs	r2, #32
 8002664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002668:	2300      	movs	r3, #0
}
 800266a:	4618      	mov	r0, r3
 800266c:	3708      	adds	r7, #8
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
	...

08002674 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002674:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002678:	b0c0      	sub	sp, #256	; 0x100
 800267a:	af00      	add	r7, sp, #0
 800267c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	691b      	ldr	r3, [r3, #16]
 8002688:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800268c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002690:	68d9      	ldr	r1, [r3, #12]
 8002692:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	ea40 0301 	orr.w	r3, r0, r1
 800269c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800269e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a2:	689a      	ldr	r2, [r3, #8]
 80026a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	431a      	orrs	r2, r3
 80026ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b0:	695b      	ldr	r3, [r3, #20]
 80026b2:	431a      	orrs	r2, r3
 80026b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	4313      	orrs	r3, r2
 80026bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68db      	ldr	r3, [r3, #12]
 80026c8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80026cc:	f021 010c 	bic.w	r1, r1, #12
 80026d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026d4:	681a      	ldr	r2, [r3, #0]
 80026d6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80026da:	430b      	orrs	r3, r1
 80026dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	695b      	ldr	r3, [r3, #20]
 80026e6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80026ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026ee:	6999      	ldr	r1, [r3, #24]
 80026f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	ea40 0301 	orr.w	r3, r0, r1
 80026fa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80026fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002700:	681a      	ldr	r2, [r3, #0]
 8002702:	4b8f      	ldr	r3, [pc, #572]	; (8002940 <UART_SetConfig+0x2cc>)
 8002704:	429a      	cmp	r2, r3
 8002706:	d005      	beq.n	8002714 <UART_SetConfig+0xa0>
 8002708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	4b8d      	ldr	r3, [pc, #564]	; (8002944 <UART_SetConfig+0x2d0>)
 8002710:	429a      	cmp	r2, r3
 8002712:	d104      	bne.n	800271e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002714:	f7ff f930 	bl	8001978 <HAL_RCC_GetPCLK2Freq>
 8002718:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800271c:	e003      	b.n	8002726 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800271e:	f7ff f917 	bl	8001950 <HAL_RCC_GetPCLK1Freq>
 8002722:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002726:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800272a:	69db      	ldr	r3, [r3, #28]
 800272c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002730:	f040 810c 	bne.w	800294c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002734:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002738:	2200      	movs	r2, #0
 800273a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800273e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8002742:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8002746:	4622      	mov	r2, r4
 8002748:	462b      	mov	r3, r5
 800274a:	1891      	adds	r1, r2, r2
 800274c:	65b9      	str	r1, [r7, #88]	; 0x58
 800274e:	415b      	adcs	r3, r3
 8002750:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002752:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8002756:	4621      	mov	r1, r4
 8002758:	eb12 0801 	adds.w	r8, r2, r1
 800275c:	4629      	mov	r1, r5
 800275e:	eb43 0901 	adc.w	r9, r3, r1
 8002762:	f04f 0200 	mov.w	r2, #0
 8002766:	f04f 0300 	mov.w	r3, #0
 800276a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800276e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002772:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002776:	4690      	mov	r8, r2
 8002778:	4699      	mov	r9, r3
 800277a:	4623      	mov	r3, r4
 800277c:	eb18 0303 	adds.w	r3, r8, r3
 8002780:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002784:	462b      	mov	r3, r5
 8002786:	eb49 0303 	adc.w	r3, r9, r3
 800278a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800278e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800279a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800279e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80027a2:	460b      	mov	r3, r1
 80027a4:	18db      	adds	r3, r3, r3
 80027a6:	653b      	str	r3, [r7, #80]	; 0x50
 80027a8:	4613      	mov	r3, r2
 80027aa:	eb42 0303 	adc.w	r3, r2, r3
 80027ae:	657b      	str	r3, [r7, #84]	; 0x54
 80027b0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80027b4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80027b8:	f7fd fd0c 	bl	80001d4 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4b61      	ldr	r3, [pc, #388]	; (8002948 <UART_SetConfig+0x2d4>)
 80027c2:	fba3 2302 	umull	r2, r3, r3, r2
 80027c6:	095b      	lsrs	r3, r3, #5
 80027c8:	011c      	lsls	r4, r3, #4
 80027ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80027ce:	2200      	movs	r2, #0
 80027d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80027d4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80027d8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80027dc:	4642      	mov	r2, r8
 80027de:	464b      	mov	r3, r9
 80027e0:	1891      	adds	r1, r2, r2
 80027e2:	64b9      	str	r1, [r7, #72]	; 0x48
 80027e4:	415b      	adcs	r3, r3
 80027e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80027e8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80027ec:	4641      	mov	r1, r8
 80027ee:	eb12 0a01 	adds.w	sl, r2, r1
 80027f2:	4649      	mov	r1, r9
 80027f4:	eb43 0b01 	adc.w	fp, r3, r1
 80027f8:	f04f 0200 	mov.w	r2, #0
 80027fc:	f04f 0300 	mov.w	r3, #0
 8002800:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002804:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002808:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800280c:	4692      	mov	sl, r2
 800280e:	469b      	mov	fp, r3
 8002810:	4643      	mov	r3, r8
 8002812:	eb1a 0303 	adds.w	r3, sl, r3
 8002816:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800281a:	464b      	mov	r3, r9
 800281c:	eb4b 0303 	adc.w	r3, fp, r3
 8002820:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002830:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002834:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002838:	460b      	mov	r3, r1
 800283a:	18db      	adds	r3, r3, r3
 800283c:	643b      	str	r3, [r7, #64]	; 0x40
 800283e:	4613      	mov	r3, r2
 8002840:	eb42 0303 	adc.w	r3, r2, r3
 8002844:	647b      	str	r3, [r7, #68]	; 0x44
 8002846:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800284a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800284e:	f7fd fcc1 	bl	80001d4 <__aeabi_uldivmod>
 8002852:	4602      	mov	r2, r0
 8002854:	460b      	mov	r3, r1
 8002856:	4611      	mov	r1, r2
 8002858:	4b3b      	ldr	r3, [pc, #236]	; (8002948 <UART_SetConfig+0x2d4>)
 800285a:	fba3 2301 	umull	r2, r3, r3, r1
 800285e:	095b      	lsrs	r3, r3, #5
 8002860:	2264      	movs	r2, #100	; 0x64
 8002862:	fb02 f303 	mul.w	r3, r2, r3
 8002866:	1acb      	subs	r3, r1, r3
 8002868:	00db      	lsls	r3, r3, #3
 800286a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800286e:	4b36      	ldr	r3, [pc, #216]	; (8002948 <UART_SetConfig+0x2d4>)
 8002870:	fba3 2302 	umull	r2, r3, r3, r2
 8002874:	095b      	lsrs	r3, r3, #5
 8002876:	005b      	lsls	r3, r3, #1
 8002878:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800287c:	441c      	add	r4, r3
 800287e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002882:	2200      	movs	r2, #0
 8002884:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002888:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800288c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002890:	4642      	mov	r2, r8
 8002892:	464b      	mov	r3, r9
 8002894:	1891      	adds	r1, r2, r2
 8002896:	63b9      	str	r1, [r7, #56]	; 0x38
 8002898:	415b      	adcs	r3, r3
 800289a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800289c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80028a0:	4641      	mov	r1, r8
 80028a2:	1851      	adds	r1, r2, r1
 80028a4:	6339      	str	r1, [r7, #48]	; 0x30
 80028a6:	4649      	mov	r1, r9
 80028a8:	414b      	adcs	r3, r1
 80028aa:	637b      	str	r3, [r7, #52]	; 0x34
 80028ac:	f04f 0200 	mov.w	r2, #0
 80028b0:	f04f 0300 	mov.w	r3, #0
 80028b4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80028b8:	4659      	mov	r1, fp
 80028ba:	00cb      	lsls	r3, r1, #3
 80028bc:	4651      	mov	r1, sl
 80028be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c2:	4651      	mov	r1, sl
 80028c4:	00ca      	lsls	r2, r1, #3
 80028c6:	4610      	mov	r0, r2
 80028c8:	4619      	mov	r1, r3
 80028ca:	4603      	mov	r3, r0
 80028cc:	4642      	mov	r2, r8
 80028ce:	189b      	adds	r3, r3, r2
 80028d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80028d4:	464b      	mov	r3, r9
 80028d6:	460a      	mov	r2, r1
 80028d8:	eb42 0303 	adc.w	r3, r2, r3
 80028dc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	2200      	movs	r2, #0
 80028e8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80028ec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80028f0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80028f4:	460b      	mov	r3, r1
 80028f6:	18db      	adds	r3, r3, r3
 80028f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80028fa:	4613      	mov	r3, r2
 80028fc:	eb42 0303 	adc.w	r3, r2, r3
 8002900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002906:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800290a:	f7fd fc63 	bl	80001d4 <__aeabi_uldivmod>
 800290e:	4602      	mov	r2, r0
 8002910:	460b      	mov	r3, r1
 8002912:	4b0d      	ldr	r3, [pc, #52]	; (8002948 <UART_SetConfig+0x2d4>)
 8002914:	fba3 1302 	umull	r1, r3, r3, r2
 8002918:	095b      	lsrs	r3, r3, #5
 800291a:	2164      	movs	r1, #100	; 0x64
 800291c:	fb01 f303 	mul.w	r3, r1, r3
 8002920:	1ad3      	subs	r3, r2, r3
 8002922:	00db      	lsls	r3, r3, #3
 8002924:	3332      	adds	r3, #50	; 0x32
 8002926:	4a08      	ldr	r2, [pc, #32]	; (8002948 <UART_SetConfig+0x2d4>)
 8002928:	fba2 2303 	umull	r2, r3, r2, r3
 800292c:	095b      	lsrs	r3, r3, #5
 800292e:	f003 0207 	and.w	r2, r3, #7
 8002932:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4422      	add	r2, r4
 800293a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800293c:	e106      	b.n	8002b4c <UART_SetConfig+0x4d8>
 800293e:	bf00      	nop
 8002940:	40011000 	.word	0x40011000
 8002944:	40011400 	.word	0x40011400
 8002948:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800294c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002950:	2200      	movs	r2, #0
 8002952:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002956:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800295a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800295e:	4642      	mov	r2, r8
 8002960:	464b      	mov	r3, r9
 8002962:	1891      	adds	r1, r2, r2
 8002964:	6239      	str	r1, [r7, #32]
 8002966:	415b      	adcs	r3, r3
 8002968:	627b      	str	r3, [r7, #36]	; 0x24
 800296a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800296e:	4641      	mov	r1, r8
 8002970:	1854      	adds	r4, r2, r1
 8002972:	4649      	mov	r1, r9
 8002974:	eb43 0501 	adc.w	r5, r3, r1
 8002978:	f04f 0200 	mov.w	r2, #0
 800297c:	f04f 0300 	mov.w	r3, #0
 8002980:	00eb      	lsls	r3, r5, #3
 8002982:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002986:	00e2      	lsls	r2, r4, #3
 8002988:	4614      	mov	r4, r2
 800298a:	461d      	mov	r5, r3
 800298c:	4643      	mov	r3, r8
 800298e:	18e3      	adds	r3, r4, r3
 8002990:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002994:	464b      	mov	r3, r9
 8002996:	eb45 0303 	adc.w	r3, r5, r3
 800299a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800299e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80029aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80029ae:	f04f 0200 	mov.w	r2, #0
 80029b2:	f04f 0300 	mov.w	r3, #0
 80029b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80029ba:	4629      	mov	r1, r5
 80029bc:	008b      	lsls	r3, r1, #2
 80029be:	4621      	mov	r1, r4
 80029c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029c4:	4621      	mov	r1, r4
 80029c6:	008a      	lsls	r2, r1, #2
 80029c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80029cc:	f7fd fc02 	bl	80001d4 <__aeabi_uldivmod>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	4b60      	ldr	r3, [pc, #384]	; (8002b58 <UART_SetConfig+0x4e4>)
 80029d6:	fba3 2302 	umull	r2, r3, r3, r2
 80029da:	095b      	lsrs	r3, r3, #5
 80029dc:	011c      	lsls	r4, r3, #4
 80029de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80029e2:	2200      	movs	r2, #0
 80029e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80029e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80029ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80029f0:	4642      	mov	r2, r8
 80029f2:	464b      	mov	r3, r9
 80029f4:	1891      	adds	r1, r2, r2
 80029f6:	61b9      	str	r1, [r7, #24]
 80029f8:	415b      	adcs	r3, r3
 80029fa:	61fb      	str	r3, [r7, #28]
 80029fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a00:	4641      	mov	r1, r8
 8002a02:	1851      	adds	r1, r2, r1
 8002a04:	6139      	str	r1, [r7, #16]
 8002a06:	4649      	mov	r1, r9
 8002a08:	414b      	adcs	r3, r1
 8002a0a:	617b      	str	r3, [r7, #20]
 8002a0c:	f04f 0200 	mov.w	r2, #0
 8002a10:	f04f 0300 	mov.w	r3, #0
 8002a14:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a18:	4659      	mov	r1, fp
 8002a1a:	00cb      	lsls	r3, r1, #3
 8002a1c:	4651      	mov	r1, sl
 8002a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a22:	4651      	mov	r1, sl
 8002a24:	00ca      	lsls	r2, r1, #3
 8002a26:	4610      	mov	r0, r2
 8002a28:	4619      	mov	r1, r3
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	189b      	adds	r3, r3, r2
 8002a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002a34:	464b      	mov	r3, r9
 8002a36:	460a      	mov	r2, r1
 8002a38:	eb42 0303 	adc.w	r3, r2, r3
 8002a3c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002a40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002a44:	685b      	ldr	r3, [r3, #4]
 8002a46:	2200      	movs	r2, #0
 8002a48:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a4a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8002a4c:	f04f 0200 	mov.w	r2, #0
 8002a50:	f04f 0300 	mov.w	r3, #0
 8002a54:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002a58:	4649      	mov	r1, r9
 8002a5a:	008b      	lsls	r3, r1, #2
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a62:	4641      	mov	r1, r8
 8002a64:	008a      	lsls	r2, r1, #2
 8002a66:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8002a6a:	f7fd fbb3 	bl	80001d4 <__aeabi_uldivmod>
 8002a6e:	4602      	mov	r2, r0
 8002a70:	460b      	mov	r3, r1
 8002a72:	4611      	mov	r1, r2
 8002a74:	4b38      	ldr	r3, [pc, #224]	; (8002b58 <UART_SetConfig+0x4e4>)
 8002a76:	fba3 2301 	umull	r2, r3, r3, r1
 8002a7a:	095b      	lsrs	r3, r3, #5
 8002a7c:	2264      	movs	r2, #100	; 0x64
 8002a7e:	fb02 f303 	mul.w	r3, r2, r3
 8002a82:	1acb      	subs	r3, r1, r3
 8002a84:	011b      	lsls	r3, r3, #4
 8002a86:	3332      	adds	r3, #50	; 0x32
 8002a88:	4a33      	ldr	r2, [pc, #204]	; (8002b58 <UART_SetConfig+0x4e4>)
 8002a8a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a8e:	095b      	lsrs	r3, r3, #5
 8002a90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002a94:	441c      	add	r4, r3
 8002a96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	673b      	str	r3, [r7, #112]	; 0x70
 8002a9e:	677a      	str	r2, [r7, #116]	; 0x74
 8002aa0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	464b      	mov	r3, r9
 8002aa8:	1891      	adds	r1, r2, r2
 8002aaa:	60b9      	str	r1, [r7, #8]
 8002aac:	415b      	adcs	r3, r3
 8002aae:	60fb      	str	r3, [r7, #12]
 8002ab0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ab4:	4641      	mov	r1, r8
 8002ab6:	1851      	adds	r1, r2, r1
 8002ab8:	6039      	str	r1, [r7, #0]
 8002aba:	4649      	mov	r1, r9
 8002abc:	414b      	adcs	r3, r1
 8002abe:	607b      	str	r3, [r7, #4]
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	f04f 0300 	mov.w	r3, #0
 8002ac8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002acc:	4659      	mov	r1, fp
 8002ace:	00cb      	lsls	r3, r1, #3
 8002ad0:	4651      	mov	r1, sl
 8002ad2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ad6:	4651      	mov	r1, sl
 8002ad8:	00ca      	lsls	r2, r1, #3
 8002ada:	4610      	mov	r0, r2
 8002adc:	4619      	mov	r1, r3
 8002ade:	4603      	mov	r3, r0
 8002ae0:	4642      	mov	r2, r8
 8002ae2:	189b      	adds	r3, r3, r2
 8002ae4:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ae6:	464b      	mov	r3, r9
 8002ae8:	460a      	mov	r2, r1
 8002aea:	eb42 0303 	adc.w	r3, r2, r3
 8002aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	2200      	movs	r2, #0
 8002af8:	663b      	str	r3, [r7, #96]	; 0x60
 8002afa:	667a      	str	r2, [r7, #100]	; 0x64
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	f04f 0300 	mov.w	r3, #0
 8002b04:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8002b08:	4649      	mov	r1, r9
 8002b0a:	008b      	lsls	r3, r1, #2
 8002b0c:	4641      	mov	r1, r8
 8002b0e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b12:	4641      	mov	r1, r8
 8002b14:	008a      	lsls	r2, r1, #2
 8002b16:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002b1a:	f7fd fb5b 	bl	80001d4 <__aeabi_uldivmod>
 8002b1e:	4602      	mov	r2, r0
 8002b20:	460b      	mov	r3, r1
 8002b22:	4b0d      	ldr	r3, [pc, #52]	; (8002b58 <UART_SetConfig+0x4e4>)
 8002b24:	fba3 1302 	umull	r1, r3, r3, r2
 8002b28:	095b      	lsrs	r3, r3, #5
 8002b2a:	2164      	movs	r1, #100	; 0x64
 8002b2c:	fb01 f303 	mul.w	r3, r1, r3
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	011b      	lsls	r3, r3, #4
 8002b34:	3332      	adds	r3, #50	; 0x32
 8002b36:	4a08      	ldr	r2, [pc, #32]	; (8002b58 <UART_SetConfig+0x4e4>)
 8002b38:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3c:	095b      	lsrs	r3, r3, #5
 8002b3e:	f003 020f 	and.w	r2, r3, #15
 8002b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4422      	add	r2, r4
 8002b4a:	609a      	str	r2, [r3, #8]
}
 8002b4c:	bf00      	nop
 8002b4e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002b52:	46bd      	mov	sp, r7
 8002b54:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b58:	51eb851f 	.word	0x51eb851f

08002b5c <memset>:
 8002b5c:	4402      	add	r2, r0
 8002b5e:	4603      	mov	r3, r0
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d100      	bne.n	8002b66 <memset+0xa>
 8002b64:	4770      	bx	lr
 8002b66:	f803 1b01 	strb.w	r1, [r3], #1
 8002b6a:	e7f9      	b.n	8002b60 <memset+0x4>

08002b6c <__libc_init_array>:
 8002b6c:	b570      	push	{r4, r5, r6, lr}
 8002b6e:	4d0d      	ldr	r5, [pc, #52]	; (8002ba4 <__libc_init_array+0x38>)
 8002b70:	4c0d      	ldr	r4, [pc, #52]	; (8002ba8 <__libc_init_array+0x3c>)
 8002b72:	1b64      	subs	r4, r4, r5
 8002b74:	10a4      	asrs	r4, r4, #2
 8002b76:	2600      	movs	r6, #0
 8002b78:	42a6      	cmp	r6, r4
 8002b7a:	d109      	bne.n	8002b90 <__libc_init_array+0x24>
 8002b7c:	4d0b      	ldr	r5, [pc, #44]	; (8002bac <__libc_init_array+0x40>)
 8002b7e:	4c0c      	ldr	r4, [pc, #48]	; (8002bb0 <__libc_init_array+0x44>)
 8002b80:	f000 f818 	bl	8002bb4 <_init>
 8002b84:	1b64      	subs	r4, r4, r5
 8002b86:	10a4      	asrs	r4, r4, #2
 8002b88:	2600      	movs	r6, #0
 8002b8a:	42a6      	cmp	r6, r4
 8002b8c:	d105      	bne.n	8002b9a <__libc_init_array+0x2e>
 8002b8e:	bd70      	pop	{r4, r5, r6, pc}
 8002b90:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b94:	4798      	blx	r3
 8002b96:	3601      	adds	r6, #1
 8002b98:	e7ee      	b.n	8002b78 <__libc_init_array+0xc>
 8002b9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8002b9e:	4798      	blx	r3
 8002ba0:	3601      	adds	r6, #1
 8002ba2:	e7f2      	b.n	8002b8a <__libc_init_array+0x1e>
 8002ba4:	08002bec 	.word	0x08002bec
 8002ba8:	08002bec 	.word	0x08002bec
 8002bac:	08002bec 	.word	0x08002bec
 8002bb0:	08002bf0 	.word	0x08002bf0

08002bb4 <_init>:
 8002bb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bb6:	bf00      	nop
 8002bb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bba:	bc08      	pop	{r3}
 8002bbc:	469e      	mov	lr, r3
 8002bbe:	4770      	bx	lr

08002bc0 <_fini>:
 8002bc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bc2:	bf00      	nop
 8002bc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bc6:	bc08      	pop	{r3}
 8002bc8:	469e      	mov	lr, r3
 8002bca:	4770      	bx	lr
